{
    "query": "what is python\n",
    "follow_up_questions": null,
    "answer": "Python is a high-level, interpreted, and object-oriented programming language known for its simplicity and readability. Created by Guido van Rossum and released in 1991, Python has become one of the most popular programming languages worldwide. It supports multiple programming paradigms, including structured, object-oriented, and functional programming. Python's design philosophy emphasizes code readability through the use of significant indentation. The language is widely used for web development, software development, data analysis, artificial intelligence, machine learning, and system scripting. Its extensive standard library, dynamic typing, and dynamic binding make it ideal for rapid application development and as a scripting language to connect existing components. Python's popularity stems from its increased productivity, fast development cycle, and robust debugging capabilities, making it a favorite among programmers for various applications.",
    "images": [
      {
        "url": "https://course_report_production.s3.amazonaws.com/rich/rich_files/rich_files/4036/original/what-is-python-programming-infographic.png",
        "description": null
      },
      {
        "url": "https://www.devopsschool.com/blog/wp-content/uploads/2023/07/image-160-1024x576.png",
        "description": "The content outlines key features of Python programming, highlighting characteristics such as ease of learning, object-oriented design, cross-platform compatibility, interpretation, a large standard library, and strong community support."
      },
      {
        "url": "https://i.ytimg.com/vi/WvhQhj4n6b8/maxresdefault.jpg",
        "description": "The design includes the text \"WHAT IS PYTHON?\" prominently displayed, accompanied by stylized representations of the Python logo and a question mark, all set against a blue background."
      },
      {
        "url": "https://uploads-ssl.webflow.com/61f7efd44d01cc87c88dc6f3/645b2a7da119bfb62780c09b_Python-101-Your-Step-by-Step-Guide-on-How-to-Learn-Python.jpg",
        "description": "Two laptops displaying lines of colorful code related to Python programming are set against a blue digital background, featuring the Python logo prominently at the bottom."
      },
      {
        "url": "https://quickboosters.com/wp-content/uploads/2022/12/Python.jpg",
        "description": "The content explains that Python, created by Guido van Rossum, is an interpreted, open-source programming language with features like being object-oriented, dynamically typed, and having a large set of libraries."
      }
    ],
    "results": [
      {
        "title": "What is Python? Executive Summary | Python.org",
        "url": "https://www.python.org/doc/essays/blurb/",
        "content": "Executive Summary Python is an interpreted, object-oriented, high-level programming language with dynamic semantics. Its high-level built in data structures, combined with dynamic typing and dynamic binding, make it very attractive for Rapid Application Development, as well as for use as a scripting or glue language to connect existing components together. Python's simple, easy to learn syntax emphasizes readability and therefore reduces the cost of program maintenance. Python supports modules and packages, which encourages program modularity and code reuse.",
        "score": 0.88372874,
        "raw_content": "What is Python? Executive Summary | Python.org\nNotice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience.\nSkip to content\n▼ Close\n\nPython\nPSF\nDocs\nPyPI\nJobs\nCommunity\n\n▲ The Python Network\n\nDonate\n≡ Menu\nSearch This Site  GO\n\n\nA A\n\nSmaller\nLarger\nReset\n\n\n\nSocialize\n\nLinkedIn\nMastodon\nChat on IRC\nTwitter\n\n\n\nAbout\n\nApplications\nQuotes\nGetting Started\nHelp\nPython Brochure\n\n\nDownloads\nAll releases\nSource code\nWindows\nmacOS\nOther Platforms\nLicense\nAlternative Implementations\n\n\nDocumentation\nDocs\nAudio/Visual Talks\nBeginner's Guide\nDeveloper's Guide\nFAQ\nNon-English Docs\nPEP Index\nPython Books\nPython Essays\n\n\nCommunity\nDiversity\nMailing Lists\nIRC\nForums\nPSF Annual Impact Report\nPython Conferences\nSpecial Interest Groups\nPython Logo\nPython Wiki\nCode of Conduct\nCommunity Awards\nGet Involved\nShared Stories\n\n\nSuccess Stories\nArts\nBusiness\nEducation\nEngineering\nGovernment\nScientific\nSoftware Development\n\n\nNews\nPython News\nPSF Newsletter\nPSF News\nPyCon US News\nNews from the Community\n\n\nEvents\nPython Events\nUser Group Events\nPython Events Archive\nUser Group Events Archive\nSubmit an Event\n\n\n\nWhat is Python? Executive Summary\nWhat is Python? Executive Summary\nPython is an interpreted, object-oriented, high-level programming language with dynamic semantics. Its high-level built in data structures, combined with dynamic typing and dynamic binding, make it very attractive for Rapid Application Development, as well as for use as a scripting or glue language to connect existing components together. Python's simple, easy to learn syntax emphasizes readability and therefore reduces the cost of program maintenance. Python supports modules and packages, which encourages program modularity and code reuse. The Python interpreter and the extensive standard library are available in source or binary form without charge for all major platforms, and can be freely distributed.\nOften, programmers fall in love with Python because of the increased productivity it provides. Since there is no compilation step, the edit-test-debug cycle is incredibly fast. Debugging Python programs is easy: a bug or bad input will never cause a segmentation fault. Instead, when the interpreter discovers an error, it raises an exception. When the program doesn't catch the exception, the interpreter prints a stack trace. A source level debugger allows inspection of local and global variables, evaluation of arbitrary expressions, setting breakpoints, stepping through the code a line at a time, and so on. The debugger is written in Python itself, testifying to Python's introspective power. On the other hand, often the quickest way to debug a program is to add a few print statements to the source: the fast edit-test-debug cycle makes this simple approach very effective.\nSee also some comparisons between Python and other languages.\nThe PSF\nThe Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission.\n▲ Back to Top\n\nAbout\nApplications\nQuotes\nGetting Started\nHelp\nPython Brochure\n\n\nDownloads\nAll releases\nSource code\nWindows\nmacOS\nOther Platforms\nLicense\nAlternative Implementations\n\n\nDocumentation\nDocs\nAudio/Visual Talks\nBeginner's Guide\nDeveloper's Guide\nFAQ\nNon-English Docs\nPEP Index\nPython Books\nPython Essays\n\n\nCommunity\nDiversity\nMailing Lists\nIRC\nForums\nPSF Annual Impact Report\nPython Conferences\nSpecial Interest Groups\nPython Logo\nPython Wiki\nCode of Conduct\nCommunity Awards\nGet Involved\nShared Stories\n\n\nSuccess Stories\nArts\nBusiness\nEducation\nEngineering\nGovernment\nScientific\nSoftware Development\n\n\nNews\nPython News\nPSF Newsletter\nPSF News\nPyCon US News\nNews from the Community\n\n\nEvents\nPython Events\nUser Group Events\nPython Events Archive\nUser Group Events Archive\nSubmit an Event\n\n\nContributing\nDeveloper's Guide\nIssue Tracker\npython-dev list\nCore Mentorship\nReport a Security Issue\n\n\n\n▲ Back to Top\n\nHelp & General Contact\nDiversity Initiatives\nSubmit Website Bug\nStatus\n\nCopyright ©2001-2025.  Python Software Foundation  Legal Statements  Privacy Notice"
      },
      {
        "title": "Introduction to Python - W3Schools",
        "url": "https://www.w3schools.com/python/python_intro.asp",
        "content": "Python is a popular programming language. It was created by Guido van Rossum, and released in 1991. It is used for: web development (server-side), software development, mathematics, system scripting. Python can be used on a server to create web applications. Python can be used for rapid prototyping, or for production-ready software development.",
        "score": 0.8533396,
        "raw_content": "Introduction to Python\n\nTutorials Exercises Certificates Services\nMenu\nSearch field \n×\n\nLog in Sign Up ★ +1 My W3Schools Get Certified For Teachers Spaces Plus Get Certified For Teachers Spaces Plus\nMy W3Schools\nTutorials\nExercises\nCertificates\nServices\nSpaces Get Certified Plus Academy Logout\n   \n×\nTutorials\nTutorials filter input \n×\nHTML and CSS\nLearn HTML Tutorial Reference\nLearn CSS Tutorial Reference\nLearn RWD Tutorial\nLearn Bootstrap Overview\nLearn W3.CSS Tutorial Reference\nLearn Sass Tutorial Reference\nLearn Colors Tutorial Reference\nLearn Icons Tutorial Reference\nLearn SVG Tutorial Reference\nLearn Canvas Tutorial Reference\nLearn Graphics Tutorial\nLearn Character Sets Reference\nLearn How To Tutorial\nData Analytics\nLearn AI Tutorial\nLearn Generative AI Tutorial\nLearn ChatGPT-3.5 Tutorial\nLearn ChatGPT-4 Tutorial\nLearn Google Bard Tutorial\nLearn Machine Learning Tutorial\nLearn DSA Tutorial\nLearn Data Science Tutorial\nLearn NumPy Tutorial\nLearn Pandas Tutorial\nLearn SciPy Tutorial\nLearn Matplotlib Tutorial\nLearn Statistics Tutorial\nLearn Excel Tutorial\nLearn Google Sheets Tutorial\nWeb Building\nCreate a Website HOT!\nCreate a Server NEW\nWhere To Start\nWeb Templates\nWeb Statistics\nWeb Certificates\nWeb Development\nCode Editor\nTest Your Typing Speed\nPlay a Code Game\nCyber Security\nAccessibility\nJoin our Newsletter\nJavaScript\nLearn JavaScript Tutorial Reference\nLearn React Tutorial\nLearn jQuery Tutorial Reference\nLearn Vue Tutorial Reference\nLearn AngularJS Tutorial Reference\nLearn JSON Tutorial Reference\nLearn AJAX Tutorial\nLearn AppML Tutorial Reference\nLearn W3.JS Tutorial Reference\nWeb Building\nCreate a Website HOT!\nCreate a Server NEW\nWhere To Start\nWeb Templates\nWeb Statistics\nWeb Certificates\nWeb Development\nCode Editor\nTest Your Typing Speed\nPlay a Code Game\nCyber Security\nAccessibility\nJoin our Newsletter\nBackend\nLearn Python Tutorial Reference\nLearn SQL Tutorial Reference\nLearn MySQL Tutorial Reference\nLearn PHP Tutorial Reference\nLearn Java Tutorial Reference\nLearn C Tutorial Reference\nLearn C++ Tutorial Reference\nLearn C# Tutorial\nLearn R Tutorial\nLearn Kotlin Tutorial\nLearn Go Tutorial\nLearn Django Tutorial Reference\nLearn PostgreSQL Tutorial\nLearn TypeScript Tutorial\nLearn ASP Tutorial Reference\nLearn Node.js Tutorial Reference\nLearn Raspberry Pi Tutorial\nLearn Git Tutorial\nLearn MongoDB Tutorial\nLearn XML Tutorial Reference\nData Analytics\nLearn AI Tutorial\nLearn Generative AI Tutorial\nLearn ChatGPT-3.5 Tutorial\nLearn ChatGPT-4 Tutorial\nLearn Google Bard Tutorial\nLearn Machine Learning Tutorial\nLearn DSA Tutorial\nLearn Data Science Tutorial\nLearn NumPy Tutorial\nLearn Pandas Tutorial\nLearn SciPy Tutorial\nLearn Matplotlib Tutorial\nLearn Statistics Tutorial\nLearn Excel Tutorial\nLearn Google Sheets Tutorial\nWeb Building\nCreate a Website HOT!\nCreate a Server NEW\nWhere To Start\nWeb Templates\nWeb Statistics\nWeb Certificates\nWeb Development\nCode Editor\nTest Your Typing Speed\nPlay a Code Game\nCyber Security\nAccessibility\nJoin our Newsletter\n×\nExercises\nExcercises filter input \n×\nHTML and CSS\nHTML Exercise Quiz\nCSS Exercise Quiz\nBootstrap 3 Exercise Quiz\nBootstrap 4 Exercise Quiz\nBootstrap 5 Exercise Quiz\nData Analytics\nDSA Exercise Quiz\nNumPy Exercise Quiz\nPandas Exercise Quiz\nSciPy Exercise Quiz\nExcel Exercise\nWhat is an Exercise? What is a Quiz?\nJavaScript\nJavaScript Exercise Quiz\nReact Exercise Quiz\njQuery Exercise Quiz\nVue Exercise Quiz\nBackend\nPython Exercise Quiz\nSQL Exercise Quiz\nMySQL Exercise Quiz\nPHP Exercise Quiz\nJava Exercise Quiz\nC Exercise Quiz\nC++ Exercise Quiz\nC# Exercise Quiz\nR Exercise Quiz\nKotlin Exercise Quiz\nDjango Exercise Quiz\nPostgreSQL Exercise Quiz\nTypeScript Exercise Quiz\nGit Exercise Quiz\nGo Exercise\nMongoDB Exercise\nData Analytics\nDSA Exercise Quiz\nNumPy Exercise Quiz\nPandas Exercise Quiz\nSciPy Exercise Quiz\nExcel Exercise\nWhat is an Exercise? What is a Quiz?\n×\nCertificates\nFilter field for certifications \n×\nHTML and CSS\nHTML Certificate Course\nCSS Certificate Course\nBootstrap 3 Certificate Course\nBootstrap 4 Certificate Course\nBootstrap 5 Certificate\nData Analytics\nDSA Certificate\nData Analytics Course\nNumPy Certificate Course\nPandas Certificate Course\nExcel Certificate\nSocial Media Course\nWhat is a Certificate?\nPrograms\nFull Access Best Value!\nFront End Certificate Course\nWeb Dev. Certificate Course\nWeb App Certificate Course\nWeb Design Certificate Course\nJavaScript\nJavaScript Certificate Course\nReact Certificate Course\njQuery Certificate Course\nVue Certificate\nPrograms\nFull Access Best Value!\nFront End Certificate Course\nWeb Dev. Certificate Course\nWeb App Certificate Course\nWeb Design Certificate Course\nPrograms\nFull Access Best Value!\nFront End Certificate Course\nWeb Dev. Certificate Course\nWeb App Certificate Course\nWeb Design Certificate Course\nBackend\nPython Certificate Course\nSQL Certificate Course\nMySQL Certificate\nPHP Certificate Course\nJava Certificate Course\nC Certificate\nC++ Certificate Course\nC# Certificate Course\nR Course\nDjango Certificate\nNodeJS Certificate\nTypeScript Certificate Course\nXML Certificate Course\nCyber Security Certificate Course\nAccessibility Certificate Course\nData Analytics\nDSA Exam\nData Analytics Course\nNumPy Course\nPandas Course\nExcel Certificate\nSocial Media Course\nWhat is a Certificate?\n×\nAll Our Services\nServices filter input \n×\nW3Schools offers a wide range of services and products for beginners and professionals,\nhelping millions of people everyday to learn and master new skills.\n#### Free Tutorials Enjoy our free tutorials like millions of other internet users since 1999\n#### References Explore our selection of references covering all popular coding languages\n#### Create a Website Create your own website with W3Schools Spaces - no setup required\n#### Exercises Test your skills with different exercises\n#### Quizzes Test yourself with multiple choice questions\n#### Get Certified Document your knowledge\n#### Log in / Sign Up Create a free W3Schools Account to Improve Your Learning Experience\n#### My Learning Track your learning progress at W3Schools and collect rewards\n#### Upgrade Become a PLUS user and unlock powerful features (ad-free, hosting, support,..)\n#### Where To Start Not sure where you want to start? Follow our guided path\n#### Code Editor (Try it) With our online code editor, you can edit code and view the result in your browser\n#### Videos Learn the basics of HTML in a fun and engaging video tutorial\n#### Templates We have created a bunch of responsive website templates you can use - for free!\n#### Web Hosting Host your own website, and share it to the world with W3Schools Spaces\n#### Create a Server Create your own server using Python, PHP, React.js, Node.js, Java, C#, etc.\n#### How To's Large collection of code snippets for HTML, CSS and JavaScript\n#### CSS Framework Build fast and responsive sites using our free W3.CSS framework\n#### Browser Statistics Read long term trends of browser usage\n#### Typing Speed Test your typing speed\n#### Color Picker Use our color picker to find different RGB, HEX and HSL colors.  \n#### Code Game W3Schools Coding Game! Help the lynx collect pine cones  \n#### Newsletter Join our newsletter and get access to exclusive content every month\n#### For Teachers Contact us about W3Schools Academy for educational institutions\n#### For Businesses Contact us about W3Schools Academy for your organization\nContact Us\nAbout sales: sales@w3schools.com\nAbout errors: help@w3schools.com\n   \n×\n❮     \n\nHTML CSS JAVASCRIPT SQL PYTHON JAVA PHP HOW TO W3.CSS C C++ C# BOOTSTRAP REACT MYSQL JQUERY EXCEL XML DJANGO NUMPY PANDAS NODEJS R TYPESCRIPT ANGULAR GIT POSTGRESQL MONGODB ASP AI GO KOTLIN SASS VUE DSA GEN AI SCIPY CYBERSECURITY DATA SCIENCE\n❯   \nPython Tutorial\nPython HOME Python Intro Python Get Started Python Syntax Python Comments Python Variables\nPython Variables Variable Names Assign Multiple Values Output Variables Global Variables Variable Exercises\nPython Data Types Python Numbers Python Casting Python Strings\nPython Strings Slicing Strings Modify Strings Concatenate Strings Format Strings Escape Characters String Methods String Exercises\nPython Booleans Python Operators Python Lists\nPython Lists Access List Items Change List Items Add List Items Remove List Items Loop Lists List Comprehension Sort Lists Copy Lists Join Lists List Methods List Exercises\nPython Tuples\nPython Tuples Access Tuples Update Tuples Unpack Tuples Loop Tuples Join Tuples Tuple Methods Tuple Exercises\nPython Sets\nPython Sets Access Set Items Add Set Items Remove Set Items Loop Sets Join Sets Set Methods Set Exercises\nPython Dictionaries\nPython Dictionaries Access Items Change Items Add Items Remove Items Loop Dictionaries Copy Dictionaries Nested Dictionaries Dictionary Methods Dictionary Exercises\nPython If...Else Python While Loops Python For Loops Python Functions Python Lambda Python Arrays Python Classes/Objects Python Inheritance Python Iterators Python Polymorphism Python Scope Python Modules Python Dates Python Math Python JSON Python RegEx Python PIP Python Try...Except Python User Input Python String Formatting \nFile Handling\nPython File Handling Python Read Files Python Write/Create Files Python Delete Files \nPython Modules\nNumPy Tutorial Pandas Tutorial SciPy Tutorial Django Tutorial \nPython Matplotlib\nMatplotlib Intro Matplotlib Get Started Matplotlib Pyplot Matplotlib Plotting Matplotlib Markers Matplotlib Line Matplotlib Labels Matplotlib Grid Matplotlib Subplot Matplotlib Scatter Matplotlib Bars Matplotlib Histograms Matplotlib Pie Charts \nMachine Learning\nGetting Started Mean Median Mode Standard Deviation Percentile Data Distribution Normal Data Distribution Scatter Plot Linear Regression Polynomial Regression Multiple Regression Scale Train/Test Decision Tree Confusion Matrix Hierarchical Clustering Logistic Regression Grid Search Categorical Data K-means Bootstrap Aggregation Cross Validation AUC - ROC Curve K-nearest neighbors \nPython MySQL\nMySQL Get Started MySQL Create Database MySQL Create Table MySQL Insert MySQL Select MySQL Where MySQL Order By MySQL Delete MySQL Drop Table MySQL Update MySQL Limit MySQL Join \nPython MongoDB\nMongoDB Get Started MongoDB Create DB MongoDB Collection MongoDB Insert MongoDB Find MongoDB Query MongoDB Sort MongoDB Delete MongoDB Drop Collection MongoDB Update MongoDB Limit \nPython Reference\nPython Overview Python Built-in Functions Python String Methods Python List Methods Python Dictionary Methods Python Tuple Methods Python Set Methods Python File Methods Python Keywords Python Exceptions Python Glossary \nModule Reference\nRandom Module Requests Module Statistics Module Math Module cMath Module \nPython How To\nRemove List Duplicates Reverse a String Add Two Numbers \nPython Examples\nPython Examples Python Compiler Python Exercises Python Quiz Python Server Python Syllabus Python Study Plan Python Interview Q&A Python Bootcamp Python Certificate \nPython Introduction\n❮ Previous Next ❯\n\n\nWhat is Python?\nPython is a popular programming language. It was created by Guido van Rossum, and released in 1991.\nIt is used for:\n\nweb development (server-side),\nsoftware development,\nmathematics,\nsystem scripting.\n\nWhat can Python do?\n\nPython can be used on a server to create web applications.\nPython can be used alongside software to create workflows.\nPython can connect to database systems. It can also read and modify files.\nPython can be used to handle big data and perform complex mathematics.\nPython can be used for rapid prototyping, or for production-ready software development.\n\n\n\nWhy Python?\n\nPython works on different platforms (Windows, Mac, Linux, Raspberry Pi, etc).\nPython has a simple syntax similar to the English language.\nPython has syntax that allows developers to write programs with fewer lines than some other programming languages.\nPython runs on an interpreter system, meaning that code can be executed as soon as it is written. This means that prototyping can be very quick.\nPython can be treated in a procedural way, an object-oriented way or a functional way.\n\nGood to know\n\nThe most recent major version of Python is Python 3, which we shall be using in this tutorial. However, Python 2, although not being updated with anything other than security updates, is still quite popular.\nIn this tutorial Python will be written in a text editor. It is possible to write Python in an Integrated Development Environment, such as Thonny, Pycharm, Netbeans or Eclipse which are particularly useful when managing larger collections of Python files.\n\nPython Syntax compared to other programming languages\n\nPython was designed for readability, and has some similarities to the English language with influence from mathematics.\nPython uses new lines to complete a command, as opposed to other programming languages which often use semicolons or parentheses.\nPython relies on indentation, using whitespace, to define scope; such as the scope of loops, functions and classes. Other programming languages often use curly-brackets for this purpose.\n\nExampleGet your own Python Server\nprint(\"Hello, World!\")\nTry it Yourself »\n\nVideo: Python Introduction\n  \n\n❮ Previous Next ❯\n★ +1\nTrack your progress - it's free!\nLog in Sign Up\n\nCOLOR PICKER\n\n\n\n\nPLUS\nSPACES\nGET CERTIFIED\nFOR TEACHERS\nFOR BUSINESS\nCONTACT US\n×\nContact Sales\nIf you want to use W3Schools services as an educational institution, team or enterprise, send us an e-mail:\nsales@w3schools.com\nReport Error\nIf you want to report an error, or if you want to make a suggestion, send us an e-mail:\nhelp@w3schools.com\nTop Tutorials\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nHow To Tutorial\nSQL Tutorial\nPython Tutorial\nW3.CSS Tutorial\nBootstrap Tutorial\nPHP Tutorial\nJava Tutorial\nC++ Tutorial\njQuery Tutorial \nTop References\nHTML Reference\nCSS Reference\nJavaScript Reference\nSQL Reference\nPython Reference\nW3.CSS Reference\nBootstrap Reference\nPHP Reference\nHTML Colors\nJava Reference\nAngular Reference\njQuery Reference \nTop Examples\nHTML Examples\nCSS Examples\nJavaScript Examples\nHow To Examples\nSQL Examples\nPython Examples\nW3.CSS Examples\nBootstrap Examples\nPHP Examples\nJava Examples\nXML Examples\njQuery Examples \n##### Get CertifiedHTML Certificate\nCSS Certificate\nJavaScript Certificate\nFront End Certificate\nSQL Certificate\nPython Certificate\nPHP Certificate\njQuery Certificate\nJava Certificate\nC++ Certificate\nC# Certificate\nXML Certificate \n   \nFORUM ABOUT ACADEMY\nW3Schools is optimized for learning and training. Examples might be simplified to improve reading and learning.\nTutorials, references, and examples are constantly reviewed to avoid errors, but we cannot warrant full correctness\nof all content. While using W3Schools, you agree to have read and accepted our terms of use, cookie and privacy policy.  \nCopyright 1999-2025 by Refsnes Data. All Rights Reserved. W3Schools is Powered by W3.CSS."
      },
      {
        "title": "Python (programming language) - Wikipedia",
        "url": "https://en.wikipedia.org/wiki/Python_(programming_language)",
        "content": "32-bit WebAssembly (WASI) Tier 3: 64-bit Android,[6] iOS, FreeBSD, and (32-bit) Raspberry Pi OS Unofficial (or has been known to work): Other Unix-like/BSD variants) and a few other platforms[7][8][9] License Python Software Foundation License Filename extensions .py, .pyw, .pyz,[10] .pyi, .pyc, .pyd Website python.org Major implementations CPython, PyPy, Stackless Python, MicroPython, CircuitPython, IronPython, Jython Dialects Cython, RPython, Starlark[11] Influenced by ABC,[12] Ada,[13] ALGOL 68,[14] APL,[15] C,[16] C++,[17] CLU,[18] Dylan,[19] Haskell,[20][15] Icon,[21] Lisp,[22] Modula-3,[14][17] Perl,[23] Standard ML[15] Influenced Apache Groovy, Boo, Cobra, CoffeeScript,[24] D, F#, GDScript, Go, JavaScript,[25][26] Julia,[27] Mojo,[28] Nim, Ring,[29] Ruby,[30] Swift,[31] V[32] Python Programming at Wikibooks Python is a high-level, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation. It supports multiple programming paradigms, including structured (particularly procedural), object-oriented and functional programming. [37] Python consistently ranks as one of the most popular programming languages, and has gained widespread use in the machine learning community.",
        "score": 0.81418616,
        "raw_content": "Jump to content\nMain menu\nSearch\nDonate\nCreate account\nLog in\nPersonal tools\nToggle the table of contents\nPython (programming language)\n112 languages\nArticle\nTalk\nRead\nEdit\nView history\nTools\nFrom Wikipedia, the free encyclopedia\nThis article is about the Python programming language. For the animal, see Python (genus).\nPython\nParadigm    Multi-paradigm: object-oriented,[1] procedural (imperative), functional, structured, reflective\nDesigned by Guido van Rossum\nDeveloper   Python Software Foundation\nFirst appeared  20 February 1991; 33 years ago[2]\nStable release\n3.13.1 / 3 December 2024; 2 months ago\nTyping discipline   duck, dynamic, strong;[3] optional type annotations (since 3.5, but those hints are ignored, except with unofficial tools)[4]\nOS\nTier 1: 64-bit Linux, macOS; 64- and 32-bit Windows 10+[5]\nTier 2: E.g. 32-bit WebAssembly (WASI)\nTier 3: 64-bit Android,[6] iOS, FreeBSD, and (32-bit) Raspberry Pi OS\nUnofficial (or has been known to work): Other Unix-like/BSD variants) and a few other platforms[7][8][9]\nLicense Python Software Foundation License\nFilename extensions .py, .pyw, .pyz,[10]\n.pyi, .pyc, .pyd\nWebsite python.org\nMajor implementations\nCPython, PyPy, Stackless Python, MicroPython, CircuitPython, IronPython, Jython\nDialects\nCython, RPython, Starlark[11]\nInfluenced by\nABC,[12] Ada,[13] ALGOL 68,[14]\nAPL,[15] C,[16] C++,[17] CLU,[18] Dylan,[19]\nHaskell,[20][15] Icon,[21] Lisp,[22]\nModula-3,[14][17] Perl,[23] Standard ML[15]\nInfluenced\nApache Groovy, Boo, Cobra, CoffeeScript,[24] D, F#, GDScript, Go, JavaScript,[25][26] Julia,[27] Mojo,[28] Nim, Ring,[29] Ruby,[30] Swift,[31] V[32]\nPython Programming at Wikibooks\nPython is a high-level, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation.[33]\nPython is dynamically type-checked and garbage-collected. It supports multiple programming paradigms, including structured (particularly procedural), object-oriented and functional programming. It is often described as a \"batteries included\" language due to its comprehensive standard library.[34][35]\nGuido van Rossum began working on Python in the late 1980s as a successor to the ABC programming language and first released it in 1991 as Python 0.9.0.[36] Python 2.0 was released in 2000. Python 3.0, released in 2008, was a major revision not completely backward-compatible with earlier versions. Python 2.7.18, released in 2020, was the last release of Python 2.[37]\nPython consistently ranks as one of the most popular programming languages, and has gained widespread use in the machine learning community.[38][39][40][41]\nHistory[edit]\nMain article: History of Python\nThe designer of Python, Guido van Rossum, at PyCon US 2024\nPython was conceived in the late 1980s[42] by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC programming language, which was inspired by SETL,[43] capable of exception handling and interfacing with the Amoeba operating system.[12] Its implementation began in December 1989.[44] Van Rossum shouldered sole responsibility for the project, as the lead developer, until 12 July 2018, when he announced his \"permanent vacation\" from his responsibilities as Python's \"benevolent dictator for life\" (BDFL), a title the Python community bestowed upon him to reflect his long-term commitment as the project's chief decision-maker[45] (he has since come out of retirement and is self-titled \"BDFL-emeritus\"). In January 2019, active Python core developers elected a five-member Steering Council to lead the project.[46][47]\nThe name Python is said to come from the British comedy series Monty Python's Flying Circus.[48]\nPython 2.0 was released on 16 October 2000, with many major new features such as list comprehensions, cycle-detecting garbage collection, reference counting, and Unicode support.[49] Python 2.7's end-of-life was initially set for 2015, then postponed to 2020 out of concern that a large body of existing code could not easily be forward-ported to Python 3.[50][51] No further security patches or other improvements will be released for it.[52][53] While Python 2.7 and older versions are officially unsupported, a different unofficial Python implementation, PyPy, continues to support Python 2, i.e. \"2.7.18+\" (plus 3.10), with the plus meaning (at least some) \"backported security updates\".[54]\nPython 3.0 was released on 3 December 2008, with some new semantics and changed syntax. At least every Python release since (now unsupported) 3.5 has added some syntax to the language, and a few later releases have dropped outdated modules, or changed semantics, at least in a minor way.\nSince 7 October 2024, Python 3.13 is the latest stable release, and it and, for few more months, 3.12 are the only releases with active support including for bug fixes (as opposed to just for security) and Python 3.9,[55] is the oldest supported version of Python (albeit in the 'security support' phase), due to Python 3.8 reaching end-of-life.[56][57] Starting with 3.13, it and later versions have 2 years of full support (up from one and a half), followed by 3 years of security support (for same total support as before).\nSecurity updates were expedited in 2021 (and again twice in 2022, and more fixed in 2023 and in September 2024 for Python 3.12.6 down to 3.8.20), since all Python versions were insecure (including 2.7[58]) because of security issues leading to possible remote code execution[59] and web-cache poisoning.[60]\nPython 3.10 added the | union type operator[61] and the match and case keywords (for structural pattern matching statements). 3.11 expanded exception handling functionality. Python 3.12 added the new keyword type. Notable changes in 3.11 from 3.10 include increased program execution speed and improved error reporting.[62] Python 3.11 claims to be between 10 and 60% faster than Python 3.10, and Python 3.12 adds another 5% on top of that. It also has improved error messages (again improved in 3.14), and many other changes.\nPython 3.13 introduces more syntax for types, a new and improved interactive interpreter (REPL), featuring multi-line editing and color support; an incremental garbage collector (producing shorter pauses for collection in programs with a lot of objects, and addition to the improved speed in 3.11 and 3.12), and an experimental just-in-time (JIT) compiler (such features, can/needs to be enabled specifically for the increase in speed),[63] and an experimental free-threaded build mode, which disables the global interpreter lock (GIL), allowing threads to run more concurrently, that latter feature enabled with python3.13t or python3.13t.exe.\nPython 3.13 introduces some change in behavior, i.e. new \"well-defined semantics\", fixing bugs (plus many removals of deprecated classes, functions and methods, and removed some of the C API and outdated modules): \"The [old] implementation of locals() and frame.f_locals is slow, inconsistent and buggy [and it] has many corner cases and oddities. Code that works around those may need to be changed. Code that uses locals() for simple templating, or print debugging, will continue to work correctly.\"[64]\nSome (more) standard library modules and many deprecated classes, functions and methods, will be removed in Python 3.15 or 3.16.[65][66]\nPython 3.11 adds Sigstore digital verification signatures for all CPython artifacts (in addition to PGP). Since use of PGP has been criticized by security practitioners Python is moving to Sigstore exclusively and dropping PGP from 3.14.[67]\nPython 3.14 is now in alpha 3; regarding possible change to annotations: \"In Python 3.14, from future import annotations will continue to work as it did before, converting annotations into strings.\"[68]\nPEP 711 proposes PyBI: a standard format for distributing Python Binaries.[69]\nPython 3.15 will \"Make UTF-8 mode default\",[70] the mode exists in all current Python versions, but currently needs to be opted into. UTF-8 is already used, by default, on Windows (and elsewhere), for most things, but e.g. to open files it's not and enabling also makes code fully cross-platform, i.e. use UTF-8 for everything on all platforms.\nDesign philosophy and features[edit]\nPython is a multi-paradigm programming language. Object-oriented programming and structured programming are fully supported, and many of their features support functional programming and aspect-oriented programming (including metaprogramming[71] and metaobjects).[72] Many other paradigms are supported via extensions, including design by contract[73][74] and logic programming.[75] Python is often referred to as a 'glue language'[76] because it can seamlessly integrate components written in other languages.\nPython uses dynamic typing and a combination of reference counting and a cycle-detecting garbage collector for memory management.[77] It uses dynamic name resolution (late binding), which binds method and variable names during program execution.\nIts design offers some support for functional programming in the Lisp tradition. It has filter,mapandreduce functions; list comprehensions, dictionaries, sets, and generator expressions.[78] The standard library has two modules (itertools and functools) that implement functional tools borrowed from Haskell and Standard ML.[79]\nIts core philosophy is summarized in the Zen of Python (PEP 20), which includes aphorisms such as:[80]\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nReadability counts.\nHowever, Python features regularly violate these principles and have received criticism for adding unnecessary language bloat.[81] Responses to these criticisms are that the Zen of Python is a guideline rather than a rule.[82] The addition of some new features had been so controversial that Guido van Rossum resigned as Benevolent Dictator for Life following vitriol over the addition of the assignment expression operator in Python 3.8.[83][84]\nNevertheless, rather than building all of its functionality into its core, Python was designed to be highly extensible via modules. This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing applications. Van Rossum's vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with ABC, which espoused the opposite approach.[42]\nPython claims to strive for a simpler, less-cluttered syntax and grammar while giving developers a choice in their coding methodology. In contrast to Perl's \"there is more than one way to do it\" motto, Python embraces a \"there should be one—and preferably only one—obvious way to do it.\" philosophy.[80] In practice, however, Python provides many ways to achieve the same task. There are, for example, at least three ways to format a string literal, with no certainty as to which one a programmer should use.[85] Alex Martelli, a Fellow at the Python Software Foundation and Python book author, wrote: \"To describe something as 'clever' is not considered a compliment in the Python culture.\"[86]\nPython's developers usually strive to avoid premature optimization and reject patches to non-critical parts of the CPython reference implementation that would offer marginal increases in speed at the cost of clarity.[87] Execution speed can be improved by moving speed-critical functions to extension modules written in languages such as C, or by using a just-in-time compiler like PyPy. It is also possible to cross-compile to other languages, but it either doesn't provide the full speed-up that might be expected, since Python is a very dynamic language, or a restricted subset of Python is compiled, and possibly semantics are slightly changed.[88]\nPython's developers aim for it to be fun to use. This is reflected in its name—a tribute to the British comedy group Monty Python[89]—and in occasionally playful approaches to tutorials and reference materials, such as the use of the terms \"spam\" and \"eggs\" (a reference to a Monty Python sketch) in examples, instead of the often-used \"foo\" and \"bar\".[90][91] A common neologism in the Python community is pythonic, which has a wide range of meanings related to program style. \"Pythonic\" code may use Python idioms well, be natural or show fluency in the language, or conform with Python's minimalist philosophy and emphasis on readability. Code that is difficult to understand or reads like a rough transcription from another programming language is called unpythonic.[92]\nSyntax and semantics[edit]\nMain article: Python syntax and semantics\nAn example of Python code and indentation\nExample of C# code with curly braces and semicolons\nPython is meant to be an easily readable language. Its formatting is visually uncluttered and often uses English keywords where other languages use punctuation. Unlike many other languages, it does not use curly brackets to delimit blocks, and semicolons after statements are allowed but rarely used. It has fewer syntactic exceptions and special cases than C or Pascal.[93]\nIndentation[edit]\nMain article: Python syntax and semantics § Indentation\nPython uses whitespace indentation, rather than curly brackets or keywords, to delimit blocks. An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block.[94] Thus, the program's visual structure accurately represents its semantic structure.[95] This feature is sometimes termed the off-side rule. Some other languages use indentation this way; but in most, indentation has no semantic meaning. The recommended indent size is four spaces.[96]\nStatements and control flow[edit]\nPython's statements include:\nThe assignment statement, using a single equals sign =\nThe if statement, which conditionally executes a block of code, along with else and elif (a contraction of else if)\nThe for statement, which iterates over an iterable object, capturing each element to a local variable for use by the attached block\nThe while statement, which executes a block of code as long as its condition is true\nThe try statement, which allows exceptions raised in its attached code block to be caught and handled by except clauses (or new syntax except* in Python 3.11 for exception groups[97]); it also ensures that clean-up code in a finally block is always run regardless of how the block exits\nThe raise statement, used to raise a specified exception or re-raise a caught exception\nThe class statement, which executes a block of code and attaches its local namespace to a class, for use in object-oriented programming\nThe def statement, which defines a function or method\nThe with statement, which encloses a code block within a context manager (for example, acquiring a lock before it is run, then releasing the lock; or opening and closing a file), allowing resource-acquisition-is-initialization (RAII)-like behavior and replacing a common try/finally idiom[98]\nThe break statement, which exits a loop\nThe continue statement, which skips the rest of the current iteration and continues with the next\nThe del statement, which removes a variable—deleting the reference from the name to the value, and producing an error if the variable is referred to before it is redefined\nThe pass statement, serving as a NOP, syntactically needed to create an empty code block\nThe assert statement, used in debugging to check for conditions that should apply\nThe yield statement, which returns a value from a generator function (and also an operator); used to implement coroutines\nThe return statement, used to return a value from a function\nThe import and from statements, used to import modules whose functions or variables can be used in the current program\nThe match and case statements, an analog of the switch statement construct, that compares an expression against one or more cases as a control-of-flow measure.\nThe assignment statement (=) binds a name as a reference to a separate, dynamically allocated object. Variables may subsequently be rebound at any time to any object. In Python, a variable name is a generic reference holder without a fixed data type; however, it always refers to some object with a type. This is called dynamic typing—in contrast to statically-typed languages, where each variable may contain only a value of a certain type.\nPython does not support tail call optimization or first-class continuations, and, according to Van Rossum, it never will.[99][100] However, better support for coroutine-like functionality is provided by extending Python's generators.[101] Before 2.5, generators were lazy iterators; data was passed unidirectionally out of the generator. From Python 2.5 on, it is possible to pass data back into a generator function; and from version 3.3, it can be passed through multiple stack levels.[102]\nExpressions[edit]\nPython's expressions include:\nThe +, -, and * operators for mathematical addition, subtraction, and multiplication are similar to other languages, but the behavior of division differs. There are two types of divisions in Python: floor division (or integer division) // and floating-point / division.[103] Python uses the ** operator for exponentiation.\nPython uses the + operator for string concatenation. Python uses the * operator for duplicating a string a specified number of times.\nThe @ infix operator is intended to be used by libraries such as NumPy for matrix multiplication.[104][105]\nThe syntax :=, called the \"walrus operator\", was introduced in Python 3.8. It assigns values to variables as part of a larger expression.[106]\nIn Python, == compares by value. Python's is operator may be used to compare object identities (comparison by reference), and comparisons may be chained—for example, a <= b <= c.\nPython uses and, or, and not as Boolean operators.\nPython has a type of expression named a list comprehension, and a more general expression named a generator expression.[78]\nAnonymous functions are implemented using lambda expressions; however, there may be only one expression in each body.\nConditional expressions are written as x if c else y[107] (different in order of operands from the c ? x : y operator common to many other languages).\nPython makes a distinction between lists and tuples. Lists are written as [1, 2, 3], are mutable, and cannot be used as the keys of dictionaries (dictionary keys must be immutable in Python). Tuples, written as (1, 2, 3), are immutable and thus can be used as keys of dictionaries, provided all of the tuple's elements are immutable. The + operator can be used to concatenate two tuples, which does not directly modify their contents, but produces a new tuple containing the elements of both. Thus, given the variable t initially equal to (1, 2, 3), executing t = t + (4, 5) first evaluates t + (4, 5), which yields (1, 2, 3, 4, 5), which is then assigned back to t—thereby effectively \"modifying the contents\" of t while conforming to the immutable nature of tuple objects. Parentheses are optional for tuples in unambiguous contexts.[108]\nPython features sequence unpacking where multiple expressions, each evaluating to anything that can be assigned (to a variable, writable property, etc.) are associated in an identical manner to that forming tuple literals—and, as a whole, are put on the left-hand side of the equal sign in an assignment statement. The statement expects an iterable object on the right-hand side of the equal sign that produces the same number of values as the provided writable expressions; when iterated through them, it assigns each of the produced values to the corresponding expression on the left.[109]\nPython has a \"string format\" operator % that functions analogously to printf format strings in C—e.g. \"spam=%s eggs=%d\" % (\"blah\", 2) evaluates to \"spam=blah eggs=2\". In Python 2.6+ and 3+, this was supplemented by the format() method of the str class, e.g. \"spam={0} eggs={1}\".format(\"blah\", 2). Python 3.6 added \"f-strings\": spam = \"blah\"; eggs = 2; f'spam={spam} eggs={eggs}'.[110]\nStrings in Python can be concatenated by \"adding\" them (with the same operator as for adding integers and floats), e.g. \"spam\" + \"eggs\" returns \"spameggs\". If strings contain numbers, they are added as strings rather than integers, e.g. \"2\" + \"2\" returns \"22\".\nPython has various string literals:\nDelimited by single or double quotes; unlike in Unix shells, Perl, and Perl-influenced languages, single and double quotes work the same. Both use the backslash () as an escape character. String interpolation became available in Python 3.6 as \"formatted string literals\".[110]\nTriple-quoted (beginning and ending with three single or double quotes), which may span multiple lines and function like here documents in shells, Perl, and Ruby.\nRaw string varieties, denoted by prefixing the string literal with r. Escape sequences are not interpreted; hence raw strings are useful where literal backslashes are common, such as regular expressions and Windows-style paths. (Compare \"@-quoting\" in C#.)\nPython has array index and array slicing expressions in lists, denoted as a[key], a[start:stop] or a[start:stop:step]. Indexes are zero-based, and negative indexes are relative to the end. Slices take elements from the start index up to, but not including, the stop index. The third slice parameter, called step or stride, allows elements to be skipped and reversed. Slice indexes may be omitted—for example, a[:] returns a copy of the entire list. Each element of a slice is a shallow copy.\nIn Python, a distinction between expressions and statements is rigidly enforced, in contrast to languages such as Common Lisp, Scheme, or Ruby. This leads to duplicating some functionality. For example:\nList comprehensions vs. for-loops\nConditional expressions vs. if blocks\nThe eval() vs. exec() built-in functions (in Python 2, exec is a statement); the former is for expressions, the latter is for statements\nStatements cannot be a part of an expression—so list and other comprehensions or lambda expressions, all being expressions, cannot contain statements. A particular case is that an assignment statement such as a = 1 cannot form part of the conditional expression of a conditional statement.\nMethods[edit]\nMethods on objects are functions attached to the object's class; the syntax instance.method(argument) is, for normal methods and functions, syntactic sugar for Class.method(instance, argument). Python methods have an explicit self parameter to access instance data, in contrast to the implicit self (or this) in some other object-oriented programming languages (e.g., C++, Java, Objective-C, Ruby).[111] Python also provides methods, often called dunder methods (due to their names beginning and ending with double-underscores), to allow user-defined classes to modify how they are handled by native operations including length, comparison, in arithmetic operations and type conversion.[112]\nTyping[edit]\nThe standard type hierarchy in Python 3\nPython uses duck typing and has typed objects but untyped variable names. Type constraints are not checked at compile time; rather, operations on an object may fail, signifying that it is not of a suitable type. Despite being dynamically typed, Python is strongly typed, forbidding operations that are not well-defined (for example, adding a number to a string) rather than silently attempting to make sense of them.\nPython allows programmers to define their own types using classes, most often used for object-oriented programming. New instances of classes are constructed by calling the class (for example, SpamClass() or EggsClass()), and the classes are instances of the metaclass type (itself an instance of itself), allowing metaprogramming and reflection.\nBefore version 3.0, Python had two kinds of classes (both using the same syntax): old-style and new-style;[113] current Python versions only support the semantics of the new style.\nPython supports optional type annotations.[4][114] These annotations are not enforced by the language, but may be used by external tools such as mypy to catch errors.[115][116] Mypy also supports a Python compiler called mypyc, which leverages type annotations for optimization.[117]\nSummary of Python 3's built-in types\nType    Mutability  Description Syntax examples\nbool    immutable   Boolean value   True\nFalse\nbytearray   mutable Sequence of bytes   bytearray(b'Some ASCII')\nbytearray(b\"Some ASCII\")\nbytearray([119, 105, 107, 105])\nbytes   immutable   Sequence of bytes   b'Some ASCII'\nb\"Some ASCII\"\nbytes([119, 105, 107, 105])\ncomplex immutable   Complex number with real and imaginary parts    3+2.7j\n3 + 2.7j\ndict    mutable Associative array (or dictionary) of key and value pairs; can contain mixed types (keys and values), keys must be a hashable type   {'key1': 1.0, 3: False}\n{}\ntypes.EllipsisType  immutable   An ellipsis placeholder to be used as an index in NumPy arrays  ...\nEllipsis\nfloat   immutable   Double-precision floating-point number. The precision is machine-dependent but in practice is generally implemented as a 64-bit IEEE 754 number with 53 bits of precision.[118] \n1.33333\nfrozenset   immutable   Unordered set, contains no duplicates; can contain mixed types, if hashable frozenset([4.0, 'string', True])\nint immutable   Integer of unlimited magnitude[119] 42\nlist    mutable List, can contain mixed types   [4.0, 'string', True]\n[]\ntypes.NoneType  immutable   An object representing the absence of a value, often called null in other languages None\ntypes.NotImplementedType    immutable   A placeholder that can be returned from overloaded operators to indicate unsupported operand types. NotImplemented\nrange   immutable   An immutable sequence of numbers commonly used for looping a specific number of times in for loops[120] range(−1, 10)\nrange(10, −5, −2)\nset mutable Unordered set, contains no duplicates; can contain mixed types, if hashable {4.0, 'string', True}\nset()\nstr immutable   A character string: sequence of Unicode codepoints  'Wikipedia'\n\"Wikipedia\"\n\"\"\"Spanning\nmultiple\nlines\"\"\"\nSpanning\nmultiple\nlines\ntuple   immutable   Can contain mixed types (4.0, 'string', True)\n('single element',)\n()\nArithmetic operations[edit]\nPython has the usual symbols for arithmetic operators (+, -, , /), the floor division operator // and the modulo operation % (where the remainder can be negative, e.g. 4 % -3 == -2). It also has ** for exponentiation, e.g. 53 == 125 and 9*0.5 == 3.0, and a matrix‑multiplication operator @ .[121] These operators work like in traditional math; with the same precedence rules, the operators infix (+ and - can also be unary to represent positive and negative numbers respectively).\nThe division between integers produces floating-point results. The behavior of division has changed significantly over time:[122]\nCurrent Python (i.e. since 3.0) changed / to always be floating-point division, e.g. 5/2 == 2.5.\nThe floor division // operator was introduced. So 7//3 == 2, -7//3 == -3, 7.5//3 == 2.0 and -7.5//3 == -3.0. Adding from future import division causes a module used in Python 2.7 to use Python 3.0 rules for division (see above).\nIn Python terms, / is true division (or simply division), and // is floor division. / before version 3.0 is classic division.[122]\nRounding towards negative infinity, though different from most languages, adds consistency. For instance, it means that the equation (a + b)//b == a//b + 1 is always true. It also means that the equation b*(a//b) + a%b == a is valid for both positive and negative values of a. However, maintaining the validity of this equation means that while the result of a%b is, as expected, in the half-open interval [0, b), where b is a positive integer, it has to lie in the interval (b, 0] when b is negative.[123]\nPython provides a round function for rounding a float to the nearest integer. For tie-breaking, Python 3 uses round to even: round(1.5) and round(2.5) both produce 2.[124] Versions before 3 used round-away-from-zero: round(0.5) is 1.0, round(-0.5) is −1.0.[125]\nPython allows Boolean expressions with multiple equality relations in a manner that is consistent with general use in mathematics. For example, the expression a < b < c tests whether a is less than b and b is less than c.[126] C-derived languages interpret this expression differently: in C, the expression would first evaluate a < b, resulting in 0 or 1, and that result would then be compared with c.[127]\nPython uses arbitrary-precision arithmetic for all integer operations. The Decimal type/class in the decimal module provides decimal floating-point numbers to a pre-defined arbitrary precision and several rounding modes.[128] The Fraction class in the fractions module provides arbitrary precision for rational numbers.[129]\nDue to Python's extensive mathematics library, and the third-party library NumPy that further extends the native capabilities, it is frequently used as a scientific scripting language to aid in problems such as numerical data processing and manipulation.[130][131]\nFunction syntax[edit]\nFunctions are created in Python using the def keyword. In Python, you define the function as if you were calling it, by typing the function name and then the attributes required. Here is an example of a function that will print whatever is given:\ndef printer(input1, input2=\"already there\"):\n    print(input1)\n    print(input2)\nprinter(\"hello\")\nExample output:\nhello\nalready there\nIf you want the attribute to have a set value if no value is given, use the variable-defining syntax inside the function definition.\nProgramming examples[edit]\n\"Hello, World!\" program:\nprint('Hello, world!')\nProgram to calculate the factorial of a positive integer:\nn = int(input('Type a number, and its factorial will be printed: '))\nif n < 0:\nraise ValueError('You must enter a non-negative integer')\n\nfactorial = 1\nfor i in range(2, n + 1):\nfactorial *= i\n\nprint(factorial)\nLibraries[edit]\nPython's large standard library[132] provides tools suited to many tasks and is commonly cited as one of its greatest strengths. For Internet-facing applications, many standard formats and protocols such as MIME and HTTP are supported. It includes modules for creating graphical user interfaces, connecting to relational databases, generating pseudorandom numbers, arithmetic with arbitrary-precision decimals,[128] manipulating regular expressions, and unit testing.\nSome parts of the standard library are covered by specifications—for example, the Web Server Gateway Interface (WSGI) implementation wsgiref follows PEP 333[133]—but most are specified by their code, internal documentation, and test suites. However, because most of the standard library is cross-platform Python code, only a few modules need altering or rewriting for variant implementations.\nAs of 17 March 2024, the Python Package Index (PyPI), the official repository for third-party Python software, contains over 523,000[134] packages with a wide range of functionality, including:\nAutomation\nData analytics\nDatabases\nDocumentation\nGraphical user interfaces\nImage processing\nMachine learning\nMobile apps\nMultimedia\nComputer networking\nScientific computing\nSystem administration\nTest frameworks\nText processing\nWeb frameworks\nWeb scraping\nDevelopment environments[edit]\nSee also: Comparison of integrated development environments § Python\nMost Python implementations (including CPython) include a read–eval–print loop (REPL), permitting them to function as a command line interpreter for which users enter statements sequentially and receive results immediately.\nPython also comes with an Integrated development environment (IDE) called IDLE, which is more beginner-oriented.\nOther shells, including IDLE and IPython, add further abilities such as improved auto-completion, session state retention, and syntax highlighting.\nAs well as standard desktop integrated development environments including PyCharm, IntelliJ Idea, Visual Studio Code etc, there are web browser-based IDEs, including SageMath, for developing science- and math-related programs; PythonAnywhere, a browser-based IDE and hosting environment; and Canopy IDE, a commercial IDE emphasizing scientific computing.[135]\nImplementations[edit]\nSee also: List of Python software § Python implementations\nReference implementation[edit]\nCPython is the reference implementation of Python. It is written in C, meeting the C89 standard (Python 3.11 uses C11[136]) with several select C99 features. CPython includes its own C extensions, but third-party extensions are not limited to older C versions—e.g. they can be implemented with C11 or C++.[137][138] CPython compiles Python programs into an intermediate bytecode[139] which is then executed by its virtual machine.[140] CPython is distributed with a large standard library written in a mixture of C and native Python, and is available for many platforms, including Windows (starting with Python 3.9, the Python installer deliberately fails to install on Windows 7 and 8;[141][142] Windows XP was supported until Python 3.5) and most modern Unix-like systems, including macOS (and Apple M1 Macs, since Python 3.9.1, with experimental installer), with unofficial support for VMS.[143] Platform portability was one of its earliest priorities.[144] (During Python 1 and 2 development, even OS/2 and Solaris were supported,[145] but support has since been dropped for many platforms.)\nAll current Python versions (i.e. since 3.7) only support operating systems with multi-threading support.\nOther implementations[edit]\nAll alternative implementations have at least slightly different semantics (e.g. may have unordered dictionaries, unlike all current Python versions), e.g. with the larger Python ecosystem, such as with supporting the C Python API of with PyPy:\nPyPy is a fast, compliant interpreter of Python 2.7 and 3.10.[146][147] Its just-in-time compiler often brings a significant speed improvement over CPython, but some libraries written in C cannot be used with it.[148] It has e.g. RISC-V support.\nCodon is a language with an ahead-of-time (AOT) compiler, that (AOT) compiles a statically-typed Python-like language with \"syntax and semantics are nearly identical to Python's, there are some notable differences\"[149] e.g. it uses 64-bit machine integers, for speed, not arbitrary like Python, and it claims speedups over CPython are usually on the order of 10–100x. It compiles to machine code (via LLVM) and supports native multithreading.[150] Codon can also compile to Python extension modules that can be imported and used from Python.\nStackless Python is a significant fork of CPython that implements microthreads; it does not use the call stack in the same way, thus allowing massively concurrent programs. PyPy also has a stackless version.[151]\nMicroPython and CircuitPython are Python 3 variants optimized for microcontrollers, including Lego Mindstorms EV3.[152]\nPyston is a variant of the Python runtime that uses just-in-time compilation to speed up the execution of Python programs.[153]\nCinder is a performance-oriented fork of CPython 3.8 that contains a number of optimizations, including bytecode inline caching, eager evaluation of coroutines, a method-at-a-time JIT, and an experimental bytecode compiler.[154]\nSnek[155][156][157] Embedded Computing Language (compatible with e.g. 8-bit AVR microcontrollers such as ATmega 328P-based Arduino, as well as larger ones compatible with MicroPython) \"is Python-inspired, but it is not Python. It is possible to write Snek programs that run under a full Python system, but most Python programs will not run under Snek.\"[158] It is an imperative language not including OOP / classes, unlike Python, and simplifying to one number type with 32-bit single-precision (similar to JavaScript, except smaller).\nNo longer supported implementations[edit]\nOther just-in-time Python compilers have been developed, but are now unsupported:\nGoogle began a project named Unladen Swallow in 2009, with the aim of speeding up the Python interpreter five-fold by using the LLVM, and of improving its multithreading ability to scale to thousands of cores,[159] while ordinary implementations suffer from the global interpreter lock.\nPsyco is a discontinued just-in-time specializing compiler that integrates with CPython and transforms bytecode to machine code at runtime. The emitted code is specialized for certain data types and is faster than the standard Python code. Psyco does not support Python 2.7 or later.\nPyS60 was a Python 2 interpreter for Series 60 mobile phones released by Nokia in 2005. It implemented many of the modules from the standard library and some additional modules for integrating with the Symbian operating system. The Nokia N900 also supports Python with GTK widget libraries, enabling programs to be written and run on the target device.[160]\nCross-compilers to other languages[edit]\nThere are several compilers/transpilers to high-level object languages, with either unrestricted Python, a restricted subset of Python, or a language similar to Python as the source language:\nBrython,[161] Transcrypt[162][163] and Pyjs (latest release in 2012) compile Python to JavaScript.\nCython compiles (a superset of) Python to C. The resulting code is also usable with Python via direct C-level API calls into the Python interpreter.\nPyJL compiles/transpiles a subset of Python to \"human-readable, maintainable, and high-performance Julia source code\".[88] Despite claiming high performance, no tool can claim to do that for arbitrary Python code; i.e. it's known not possible to compile to a faster language or machine code. Unless semantics of Python are changed, but in many cases speedup is possible with few or no changes in the Python code. The faster Julia source code can then be used from Python, or compiled to machine code, and based that way.\nNuitka compiles Python into C.[164] It works with Python 3.4 to 3.12 (and 2.6 and 2.7), for Python's main supported platforms (and Windows 7 or even Windows XP) and for Android. It claims complete support for Python 3.10, some support for 3.11 and 3.12 and experimental support for Python 3.13. It supports macOS including Apple Silicon-based. It's a free compiler, though it also has commercial add-ons (e.g. for hiding source code).\nNumba is used from Python, as a tool (enabled by adding a decorator to relevant Python code), a JIT compiler that translates a subset of Python and NumPy code into fast machine code.\nPythran compiles a subset of Python 3 to C++ (C++11).[165]\nRPython can be compiled to C, and is used to build the PyPy interpreter of Python.\nThe Python → 11l → C++ transpiler[166] compiles a subset of Python 3 to C++ (C++17).\nSpecialized:\nMyHDL is a Python-based hardware description language (HDL), that converts MyHDL code to Verilog or VHDL code.\nOlder projects (or not to be used with Python 3.x and latest syntax):\nGoogle's Grumpy (latest release in 2017) transpiles Python 2 to Go.[167][168][169]\nIronPython allows running Python 2.7 programs (and an alpha, released in 2021, is also available for \"Python 3.4, although features and behaviors from later versions may be included\"[170]) on the .NET Common Language Runtime.[171]\nJython compiles Python 2.7 to Java bytecode, allowing the use of the Java libraries from a Python program.[172]\nPyrex (latest release in 2010) and Shed Skin (latest release in 2013) compile to C and C++ respectively.\nPerformance[edit]\nPerformance comparison of various Python implementations on a non-numerical (combinatorial) workload was presented at EuroSciPy '13.[173] Python's performance compared to other programming languages is also benchmarked by The Computer Language Benchmarks Game.[174]\nDevelopment[edit]\nPython's development is conducted largely through the Python Enhancement Proposal (PEP) process, the primary mechanism for proposing major new features, collecting community input on issues, and documenting Python design decisions.[175] Python coding style is covered in PEP 8.[176] Outstanding PEPs are reviewed and commented on by the Python community and the steering council.[175]\nEnhancement of the language corresponds with the development of the CPython reference implementation. The mailing list python-dev is the primary forum for the language's development. Specific issues were originally discussed in the Roundup bug tracker hosted at by the foundation.[177] In 2022, all issues and discussions were migrated to GitHub.[178] Development originally took place on a self-hosted source-code repository running Mercurial, until Python moved to GitHub in January 2017.[179]\nCPython's public releases come in three types, distinguished by which part of the version number is incremented:\nBackward-incompatible versions, where code is expected to break and needs to be manually ported. The first part of the version number is incremented. These releases happen infrequently—version 3.0 was released 8 years after 2.0. According to Guido van Rossum, a version 4.0 is very unlikely to ever happen.[180]\nMajor or \"feature\" releases are largely compatible with the previous version but introduce new features. The second part of the version number is incremented. Starting with Python 3.9, these releases are expected to happen annually.[181][182] Each major version is supported by bug fixes for several years after its release.[183]\nBug fix releases,[184] which introduce no new features, occur about every 3 months and are made when a sufficient number of bugs have been fixed upstream since the last release. Security vulnerabilities are also patched in these releases. The third and final part of the version number is incremented.[184]\nMany alpha, beta, and release-candidates are also released as previews and for testing before final releases. Although there is a rough schedule for each release, they are often delayed if the code is not ready. Python's development team monitors the state of the code by running the large unit test suite during development.[185]\nThe major academic conference on Python is PyCon. There are also special Python mentoring programs, such as PyLadies.\nPython 3.12 removed wstr meaning Python extensions[186] need to be modified,[187] and 3.10 added pattern matching to the language.[188]\nPython 3.12 dropped some outdated modules, and more will be dropped in the future, deprecated as of 3.13; already deprecated array 'u' format code will emit DeprecationWarning since 3.13 and will be removed in Python 3.16. The 'w' format code should be used instead. Part of ctypes is also deprecated and http.server.CGIHTTPRequestHandler will emit a DeprecationWarning, and will be removed in 3.15. Using that code already has a high potential for both security and functionality bugs. Parts of the typing module are deprecated, e.g. creating a typing.NamedTuple class using keyword arguments to denote the fields and such (and more) will be disallowed in Python 3.15.\nAPI documentation generators[edit]\nTools that can generate documentation for Python API include pydoc (available as part of the standard library), Sphinx, Pdoc and its forks, Doxygen and Graphviz, among others.[189]\nNaming[edit]\nPython's name is derived from the British comedy group Monty Python, whom Python creator Guido van Rossum enjoyed while developing the language. Monty Python references appear frequently in Python code and culture;[190] for example, the metasyntactic variables often used in Python literature are spam and eggs instead of the traditional foo and bar.[190][191] The official Python documentation also contains various references to Monty Python routines.[192][193] Users of Python are sometimes referred to as \"Pythonistas\".[194]\nThe prefix Py- is used to show that something is related to Python. Examples of the use of this prefix in names of Python applications or libraries include Pygame, a binding of Simple DirectMedia Layer to Python (commonly used to create games); PyQt and PyGTK, which bind Qt and GTK to Python respectively; and PyPy, a Python implementation originally written in Python.\nPopularity[edit]\nSince 2003, Python has consistently ranked in the top ten most popular programming languages in the TIOBE Programming Community Index where as of December 2022 it was the most popular language (ahead of C, C++, and Java).[40] It was selected as Programming Language of the Year (for \"the highest rise in ratings in a year\") in 2007, 2010, 2018, and 2020 (the only language to have done so four times as of 2020[195]).\nLarge organizations that use Python include Wikipedia, Google,[196] Yahoo!,[197] CERN,[198] NASA,[199] Facebook,[200] Amazon, Instagram,[201] Spotify,[202] and some smaller entities like Industrial Light & Magic[203] and ITA.[204] The social news networking site Reddit was written mostly in Python.[205] Organizations that partially use Python include Discord[206] and Baidu.[207]\nUses[edit]\nMain article: List of Python software\nPython Powered\nPython can serve as a scripting language for web applications, e.g. via mod_wsgi for the Apache webserver.[208] With Web Server Gateway Interface, a standard API has evolved to facilitate these applications. Web frameworks like Django, Pylons, Pyramid, TurboGears, web2py, Tornado, Flask, Bottle, and Zope support developers in the design and maintenance of complex applications. Pyjs and IronPython can be used to develop the client-side of Ajax-based applications. SQLAlchemy can be used as a data mapper to a relational database. Twisted is a framework to program communications between computers, and is used (for example) by Dropbox.\nLibraries such as NumPy, SciPy and Matplotlib allow the effective use of Python in scientific computing,[209][210] with specialized libraries such as Biopython and Astropy providing domain-specific functionality. SageMath is a computer algebra system with a notebook interface programmable in Python: its library covers many aspects of mathematics, including algebra, combinatorics, numerical mathematics, number theory, and calculus.[211] OpenCV has Python bindings with a rich set of features for computer vision and image processing.[212]\nPython is commonly used in artificial intelligence projects and machine learning projects with the help of libraries like TensorFlow, Keras, Pytorch, scikit-learn and the Logic language ProbLog.[213][214][215][216][217] As a scripting language with a modular architecture, simple syntax, and rich text processing tools, Python is often used for natural language processing.[218]\nThe combination of Python and Prolog has proved to be particularly useful for AI applications, with Prolog providing knowledge representation and reasoning capabilities. The Janus system, in particular, exploits the similarities between these two languages, in part because of their use of dynamic typing, and the simple recursive nature of their data structures. Typical applications of this combination include natural language processing, visual query answering, geospatial reasoning, and handling of semantic web data.[219][220] The Natlog system, implemented in Python, uses Definite Clause Grammars (DCGs) as prompt generators for text-to-text generators like GPT3 and text-to-image generators like DALL-E or Stable Diffusion.[221]\nPython can also be used for graphical user interface (GUI) by using libraries like Tkinter.[222][223]\nPython has been successfully embedded in many software products as a scripting language, including in finite element method software such as Abaqus, 3D parametric modelers like FreeCAD, 3D animation packages such as 3ds Max, Blender, Cinema 4D, Lightwave, Houdini, Maya, modo, MotionBuilder, Softimage, the visual effects compositor Nuke, 2D imaging programs like GIMP,[224] Inkscape, Scribus and Paint Shop Pro,[225] and musical notation programs like scorewriter and capella. GNU Debugger uses Python as a pretty printer to show complex structures such as C++ containers. Esri promotes Python as the best choice for writing scripts in ArcGIS.[226] It has also been used in several video games,[227][228] and has been adopted as first of the three available programming languages in Google App Engine, the other two being Java and Go.[229]\nMany operating systems include Python as a standard component. It ships with most Linux distributions,[230] AmigaOS 4 (using Python 2.7), FreeBSD (as a package), NetBSD, and OpenBSD (as a package) and can be used from the command line (terminal). Many Linux distributions use installers written in Python: Ubuntu uses the Ubiquity installer, while Red Hat Linux and Fedora Linux use the Anaconda installer. Gentoo Linux uses Python in its package management system, Portage.\nPython is used extensively in the information security industry, including in exploit development.[231][232]\nMost of the Sugar software for the One Laptop per Child XO, developed at Sugar Labs as of 2008, is written in Python.[233] The Raspberry Pi single-board computer project has adopted Python as its main user-programming language.\nLibreOffice includes Python and intends to replace Java with Python. Its Python Scripting Provider is a core feature[234] since Version 4.0 from 7 February 2013.\nLanguages influenced by Python[edit]\nPython's design and philosophy have influenced many other programming languages:\nBoo uses indentation, a similar syntax, and a similar object model.[235]\nCobra uses indentation and a similar syntax, and its Acknowledgements document lists Python first among languages that influenced it.[236]\nCoffeeScript, a programming language that cross-compiles to JavaScript, has Python-inspired syntax.\nECMAScript–JavaScript borrowed iterators and generators from Python.[237]\nGDScript, a scripting language very similar to Python, built-in to the Godot game engine.[238]\nGo is designed for the \"speed of working in a dynamic language like Python\"[239] and shares the same syntax for slicing arrays.\nGroovy was motivated by the desire to bring the Python design philosophy to Java.[240]\nJulia was designed to be \"as usable for general programming as Python\".[27]\nMojo is a non-strict[28][241] superset of Python (e.g. still missing classes, and adding e.g. struct).[242]\nNim uses indentation and similar syntax.[243]\nRuby's creator, Yukihiro Matsumoto, has said: \"I wanted a scripting language that was more powerful than Perl, and more object-oriented than Python. That's why I decided to design my own language.\"[244]\nSwift, a programming language developed by Apple, has some Python-inspired syntax.[245]\nKotlin blends Python and Java features, minimizing boilerplate code for enhanced developer efficiency.[246]\nPython's development practices have also been emulated by other languages. For example, the practice of requiring a document describing the rationale for, and issues surrounding, a change to the language (in Python, a PEP) is also used in Tcl,[247] Erlang,[248] and Swift.[249]\nSee also[edit]\n    Computer programming portal\n    Free and open-source software portal\nPython syntax and semantics\npip (package manager)\nList of programming languages\nHistory of programming languages\nComparison of programming languages\nReferences[edit]\n^ \"General Python FAQ – Python 3 documentation\". docs.python.org. Retrieved 7 July 2024.\n^ \"Python 0.9.1 part 01/21\". alt.sources archives. Archived from the original on 11 August 2021. Retrieved 11 August 2021.\n^ \"Why is Python a dynamic language and also a strongly typed language\". Python Wiki. Archived from the original on 14 March 2021. Retrieved 27 January 2021.\n^ a b \"PEP 483 – The Theory of Type Hints\". Python.org. Archived from the original on 14 June 2020. Retrieved 14 June 2018.\n^ \"PEP 11 – CPython platform support | peps.python.org\". Python Enhancement Proposals (PEPs). Retrieved 22 April 2024.\n^ \"PEP 738 – Adding Android as a supported platform | peps.python.org\". Python Enhancement Proposals (PEPs). Retrieved 19 May 2024.\n^ \"Download Python for Other Platforms\". Python.org. Archived from the original on 27 November 2020. Retrieved 18 August 2023.\n^ \"test – Regression tests package for Python – Python 3.7.13 documentation\". docs.python.org. Archived from the original on 17 May 2022. Retrieved 17 May 2022.\n^ \"platform – Access to underlying platform's identifying data – Python 3.10.4 documentation\". docs.python.org. Archived from the original on 17 May 2022. Retrieved 17 May 2022.\n^ Holth, Moore (30 March 2014). \"PEP 0441 – Improving Python ZIP Application Support\". Archived from the original on 26 December 2018. Retrieved 12 November 2015.\n^ \"Starlark Language\". Archived from the original on 15 June 2020. Retrieved 25 May 2019.\n^ a b \"Why was Python created in the first place?\". General Python FAQ. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 22 March 2007. I had extensive experience with implementing an interpreted language in the ABC group at CWI, and from working with this group I had learned a lot about language design. This is the origin of many Python features, including the use of indentation for statement grouping and the inclusion of very high-level data types (although the details are all different in Python).\n^ \"Ada 83 Reference Manual (raise statement)\". Archived from the original on 22 October 2019. Retrieved 7 January 2020.\n^ a b Kuchling, Andrew M. (22 December 2006). \"Interview with Guido van Rossum (July 1998)\". amk.ca. Archived from the original on 1 May 2007. Retrieved 12 March 2012. I'd spent a summer at DEC's Systems Research Center, which introduced me to Modula-2+; the Modula-3 final report was being written there at about the same time. What I learned there later showed up in Python's exception handling, modules, and the fact that methods explicitly contain 'self' in their parameter list. String slicing came from Algol-68 and Icon.\n^ a b c \"itertools – Functions creating iterators for efficient looping – Python 3.7.1 documentation\". docs.python.org. Archived from the original on 14 June 2020. Retrieved 22 November 2016. This module implements a number of iterator building blocks inspired by constructs from APL, Haskell, and SML.\n^ van Rossum, Guido (1993). \"An Introduction to Python for UNIX/C Programmers\". Proceedings of the NLUUG Najaarsconferentie (Dutch UNIX Users Group). CiteSeerX 10.1.1.38.2023. even though the design of C is far from ideal, its influence on Python is considerable.\n^ a b \"Classes\". The Python Tutorial. Python Software Foundation. Archived from the original on 23 October 2012. Retrieved 20 February 2012. It is a mixture of the class mechanisms found in C++ and Modula-3\n^ Lundh, Fredrik. \"Call By Object\". effbot.org. Archived from the original on 23 November 2019. Retrieved 21 November 2017. replace \"CLU\" with \"Python\", \"record\" with \"instance\", and \"procedure\" with \"function or method\", and you get a pretty accurate description of Python's object model.\n^ Simionato, Michele. \"The Python 2.3 Method Resolution Order\". Python Software Foundation. Archived from the original on 20 August 2020. Retrieved 29 July 2014. The C3 method itself has nothing to do with Python, since it was invented by people working on Dylan and it is described in a paper intended for lispers\n^ Kuchling, A. M. \"Functional Programming HOWTO\". Python v2.7.2 documentation. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 9 February 2012. List comprehensions and generator expressions [...] are a concise notation for such operations, borrowed from the functional programming language Haskell.\n^ Schemenauer, Neil; Peters, Tim; Hetland, Magnus Lie (18 May 2001). \"PEP 255 – Simple Generators\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 9 February 2012.\n^ \"More Control Flow Tools\". Python 3 documentation. Python Software Foundation. Archived from the original on 4 June 2016. Retrieved 24 July 2015. By popular demand, a few features commonly found in functional programming languages like Lisp have been added to Python. With the lambda keyword, small anonymous functions can be created.\n^ \"re – Regular expression operations – Python 3.10.6 documentation\". docs.python.org. Archived from the original on 18 July 2018. Retrieved 6 September 2022. This module provides regular expression matching operations similar to those found in Perl.\n^ \"CoffeeScript\". coffeescript.org. Archived from the original on 12 June 2020. Retrieved 3 July 2018.\n^ \"Perl and Python influences in JavaScript\". www.2ality.com. 24 February 2013. Archived from the original on 26 December 2018. Retrieved 15 May 2015.\n^ Rauschmayer, Axel. \"Chapter 3: The Nature of JavaScript; Influences\". O'Reilly, Speaking JavaScript. Archived from the original on 26 December 2018. Retrieved 15 May 2015.\n^ a b \"Why We Created Julia\". Julia website. February 2012. Archived from the original on 2 May 2020. Retrieved 5 June 2014. We want something as usable for general programming as Python [...]\n^ a b Krill, Paul (4 May 2023). \"Mojo language marries Python and MLIR for AI development\". InfoWorld. Archived from the original on 5 May 2023. Retrieved 5 May 2023.\n^ Ring Team (4 December 2017). \"Ring and other languages\". ring-lang.net. ring-lang. Archived from the original on 25 December 2018. Retrieved 4 December 2017.\n^ Bini, Ola (2007). Practical JRuby on Rails Web 2.0 Projects: bringing Ruby on Rails to the Java platform. Berkeley: APress. p. 3. ISBN 978-1-59059-881-8.\n^ Lattner, Chris (3 June 2014). \"Chris Lattner's Homepage\". Chris Lattner. Archived from the original on 25 December 2018. Retrieved 3 June 2014. The Swift language is the product of tireless effort from a team of language experts, documentation gurus, compiler optimization ninjas, and an incredibly important internal dogfooding group who provided feedback to help refine and battle-test ideas. Of course, it also greatly benefited from the experiences hard-won by many other languages in the field, drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.\n^ \"V documentation (Introduction)\". GitHub. Retrieved 24 December 2024.\n^ Kuhlman, Dave. \"A Python Book: Beginning Python, Advanced Python, and Python Exercises\". Section 1.1. Archived from the original (PDF) on 23 June 2012.\n^ \"About Python\". Python Software Foundation. Archived from the original on 20 April 2012. Retrieved 24 April 2012., second section \"Fans of Python use the phrase \"batteries included\" to describe the standard library, which covers everything from asynchronous processing to zip files.\"\n^ \"PEP 206 – Python Advanced Library\". Python.org. Archived from the original on 5 May 2021. Retrieved 11 October 2021.\n^ Rossum, Guido Van (20 January 2009). \"The History of Python: A Brief Timeline of Python\". The History of Python. Archived from the original on 5 June 2020. Retrieved 5 March 2021.\n^ Peterson, Benjamin (20 April 2020). \"Python 2.7.18, the last release of Python 2\". Python Insider. Archived from the original on 26 April 2020. Retrieved 27 April 2020.\n^ \"Stack Overflow Developer Survey 2022\". Stack Overflow. Archived from the original on 27 June 2022. Retrieved 12 August 2022.\n^ \"The State of Developer Ecosystem in 2020 Infographic\". JetBrains: Developer Tools for Professionals and Teams. Archived from the original on 1 March 2021. Retrieved 5 March 2021.\n^ a b \"TIOBE Index\". TIOBE. Archived from the original on 25 February 2018. Retrieved 3 January 2023. The TIOBE Programming Community index is an indicator of the popularity of programming languages Updated as required.\n^ \"PYPL PopularitY of Programming Language index\". pypl.github.io. Archived from the original on 14 March 2017. Retrieved 26 March 2021.\n^ a b Venners, Bill (13 January 2003). \"The Making of Python\". Artima Developer. Artima. Archived from the original on 1 September 2016. Retrieved 22 March 2007.\n^ van Rossum, Guido (29 August 2000). \"SETL (was: Lukewarm about range literals)\". Python-Dev (Mailing list). Archived from the original on 14 July 2018. Retrieved 13 March 2011.\n^ van Rossum, Guido (20 January 2009). \"A Brief Timeline of Python\". The History of Python. Archived from the original on 5 June 2020. Retrieved 20 January 2009.\n^ Fairchild, Carlie (12 July 2018). \"Guido van Rossum Stepping Down from Role as Python's Benevolent Dictator For Life\". Linux Journal. Archived from the original on 13 July 2018. Retrieved 13 July 2018.\n^ \"PEP 8100\". Python Software Foundation. Archived from the original on 4 June 2020. Retrieved 4 May 2019.\n^ \"PEP 13 – Python Language Governance\". Python.org. Archived from the original on 27 May 2021. Retrieved 25 August 2021.\n^ Briggs, Jason R.; Lipovača, Miran (2013). Python for kids: a playful introduction to programming. San Francisco, Calif: No Starch Press. ISBN 978-1-59327-407-8.\n^ Kuchling, A. M.; Zadka, Moshe (16 October 2000). \"What's New in Python 2.0\". Python Software Foundation. Archived from the original on 23 October 2012. Retrieved 11 February 2012.\n^ \"PEP 373 – Python 2.7 Release Schedule\". python.org. Archived from the original on 19 May 2020. Retrieved 9 January 2017.\n^ \"PEP 466 – Network Security Enhancements for Python 2.7.x\". python.org. Archived from the original on 4 June 2020. Retrieved 9 January 2017.\n^ \"Sunsetting Python 2\". Python.org. Archived from the original on 12 January 2020. Retrieved 22 September 2019.\n^ \"PEP 373 – Python 2.7 Release Schedule\". Python.org. Archived from the original on 13 January 2020. Retrieved 22 September 2019.\n^ mattip (25 December 2023). \"PyPy v7.3.14 release\". PyPy. Archived from the original on 5 January 2024. Retrieved 5 January 2024.\n^ Langa, Łukasz (17 May 2022). \"Python 3.9.13 is now available\". Python Insider. Archived from the original on 17 May 2022. Retrieved 21 May 2022.\n^ \"Status of Python versions\". Python Developer's Guide. Retrieved 7 October 2024.\n^ \"Python\". endoflife.date. 8 October 2024. Retrieved 20 November 2024.\n^ \"CVE-2021-3177\". Red Hat Customer Portal. Archived from the original on 6 March 2021. Retrieved 26 February 2021.\n^ \"CVE-2021-3177\". CVE. Archived from the original on 27 February 2021. Retrieved 26 February 2021.\n^ \"CVE-2021-23336\". CVE. Archived from the original on 24 February 2021. Retrieved 26 February 2021.\n^ \"Built-in Types\".\n^ corbet (24 October 2022). \"Python 3.11 released [LWN.net]\". lwn.net. Retrieved 15 November 2022.\n^ \"What's New In Python 3.13\". Python documentation. Retrieved 30 April 2024.\n^ \"PEP 667 – Consistent views of namespaces | peps.python.org\". Python Enhancement Proposals (PEPs). Retrieved 7 October 2024.\n^ Wouters, Thomas (9 April 2024). \"Python Insider: Python 3.12.3 and 3.13.0a6 released\". Python Insider. Retrieved 29 April 2024.\n^ \"PEP 594 – Removing dead batteries from the standard library\". Python Enhancement Proposals. Python Softtware Foundation. 20 May 2019.\n^ \"PEP 761 – Deprecating PGP signatures for CPython artifacts | peps.python.org\". Python Enhancement Proposals (PEPs). Retrieved 6 January 2025.\n^ \"PEP 749 – Implementing PEP 649 | peps.python.org\". Python Enhancement Proposals (PEPs). Retrieved 20 November 2024.\n^ \"PEP 711: PyBI: a standard format for distributing Python Binaries\". Discussions on Python.org. 7 April 2023. Retrieved 20 November 2024.\n^ \"PEP 686 – Make UTF-8 mode default | peps.python.org\". Python Enhancement Proposals (PEPs). Retrieved 20 November 2024.\n^ The Cain Gang Ltd. \"Python Metaclasses: Who? Why? When?\" (PDF). Archived from the original (PDF) on 30 May 2009. Retrieved 27 June 2009.\n^ \"3.3. Special method names\". The Python Language Reference. Python Software Foundation. Archived from the original on 15 December 2018. Retrieved 27 June 2009.\n^ \"PyDBC: method preconditions, method postconditions and class invariants for Python\". Archived from the original on 23 November 2019. Retrieved 24 September 2011.\n^ \"Contracts for Python\". Archived from the original on 15 June 2020. Retrieved 24 September 2011.\n^ \"PyDatalog\". Archived from the original on 13 June 2020. Retrieved 22 July 2012.\n^ \"Glue It All Together With Python\". Python.org. Retrieved 30 September 2024.\n^ \"Extending and Embedding the Python Interpreter: Reference Counts\". Docs.python.org. Archived from the original on 18 October 2012. Retrieved 5 June 2020. Since Python makes heavy use of malloc() and free(), it needs a strategy to avoid memory leaks as well as the use of freed memory. The chosen method is called reference counting.\n^ a b Hettinger, Raymond (30 January 2002). \"PEP 289 – Generator Expressions\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 14 June 2020. Retrieved 19 February 2012.\n^ \"6.5 itertools – Functions creating iterators for efficient looping\". Docs.python.org. Archived from the original on 14 June 2020. Retrieved 22 November 2016.\n^ a b Peters, Tim (19 August 2004). \"PEP 20 – The Zen of Python\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 26 December 2018. Retrieved 24 November 2008.\n^ Lutz, Mark (January 2022). \"Python Changes 2014+\". Learning Python. Archived from the original on 15 March 2024. Retrieved 25 February 2024.\n^ \"Confusion regarding a rule in The Zen of Python\". Python Help - Discussions on Python.org. 3 May 2022. Archived from the original on 25 February 2024. Retrieved 25 February 2024.\n^ Ambi, Chetan (4 July 2021). \"The Most Controversial Python Walrus Operator\". Python Simplified. Archived from the original on 27 August 2023. Retrieved 5 February 2024.\n^ Grifski, Jeremy (24 May 2020). \"The Controversy Behind The Walrus Operator in Python\". The Renegade Coder. Archived from the original on 28 December 2023. Retrieved 25 February 2024.\n^ Bader, Dan. \"Python String Formatting Best Practices\". Real Python. Archived from the original on 18 February 2024. Retrieved 25 February 2024.\n^ Martelli, Alex; Ravenscroft, Anna; Ascher, David (2005). Python Cookbook, 2nd Edition. O'Reilly Media. p. 230. ISBN 978-0-596-00797-3. Archived from the original on 23 February 2020. Retrieved 14 November 2015.\n^ \"Python Culture\". ebeab. 21 January 2014. Archived from the original on 30 January 2014.\n^ a b \"Transpiling Python to Julia using PyJL\" (PDF). Archived (PDF) from the original on 19 November 2023. Retrieved 20 September 2023. After manually modifying one line of code by specifying the necessary type information, we obtained a speedup of 52.6×, making the translated Julia code 19.5× faster than the original Python code.\n^ \"Why is it called Python?\". General Python FAQ. Docs.python.org. Archived from the original on 24 October 2012. Retrieved 3 January 2023.\n^ \"15 Ways Python Is a Powerful Force on the Web\". Archived from the original on 11 May 2019. Retrieved 3 July 2018.\n^ \"pprint – Data pretty printer – Python 3.11.0 documentation\". docs.python.org. Archived from the original on 22 January 2021. Retrieved 5 November 2022. stuff=['spam', 'eggs', 'lumberjack', 'knights', 'ni']\n^ \"Code Style – The Hitchhiker's Guide to Python\". docs.python-guide.org. Archived from the original on 27 January 2021. Retrieved 20 January 2021.\n^ \"Is Python a good language for beginning programmers?\". General Python FAQ. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 21 March 2007.\n^ \"Myths about indentation in Python\". Secnetix.de. Archived from the original on 18 February 2018. Retrieved 19 April 2011.\n^ Guttag, John V. (12 August 2016). Introduction to Computation and Programming Using Python: With Application to Understanding Data. MIT Press. ISBN 978-0-262-52962-4.\n^ \"PEP 8 – Style Guide for Python Code\". Python.org. Archived from the original on 17 April 2019. Retrieved 26 March 2019.\n^ \"8. Errors and Exceptions – Python 3.12.0a0 documentation\". docs.python.org. Archived from the original on 9 May 2022. Retrieved 9 May 2022.\n^ \"Highlights: Python 2.5\". Python.org. Archived from the original on 4 August 2019. Retrieved 20 March 2018.\n^ van Rossum, Guido (22 April 2009). \"Tail Recursion Elimination\". Neopythonic.blogspot.be. Archived from the original on 19 May 2018. Retrieved 3 December 2012.\n^ van Rossum, Guido (9 February 2006). \"Language Design Is Not Just Solving Puzzles\". Artima forums. Artima. Archived from the original on 17 January 2020. Retrieved 21 March 2007.\n^ van Rossum, Guido; Eby, Phillip J. (10 May 2005). \"PEP 342 – Coroutines via Enhanced Generators\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 29 May 2020. Retrieved 19 February 2012.\n^ \"PEP 380\". Python.org. Archived from the original on 4 June 2020. Retrieved 3 December 2012.\n^ \"division\". python.org. Archived from the original on 20 July 2006. Retrieved 30 July 2014.\n^ \"PEP 0465 – A dedicated infix operator for matrix multiplication\". python.org. Archived from the original on 4 June 2020. Retrieved 1 January 2016.\n^ \"Python 3.5.1 Release and Changelog\". python.org. Archived from the original on 14 May 2020. Retrieved 1 January 2016.\n^ \"What's New in Python 3.8\". Archived from the original on 8 June 2020. Retrieved 14 October 2019.\n^ van Rossum, Guido; Hettinger, Raymond (7 February 2003). \"PEP 308 – Conditional Expressions\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 13 March 2016. Retrieved 13 July 2011.\n^ \"4. Built-in Types – Python 3.6.3rc1 documentation\". python.org. Archived from the original on 14 June 2020. Retrieved 1 October 2017.\n^ \"5.3. Tuples and Sequences – Python 3.7.1rc2 documentation\". python.org. Archived from the original on 10 June 2020. Retrieved 17 October 2018.\n^ a b \"PEP 498 – Literal String Interpolation\". python.org. Archived from the original on 15 June 2020. Retrieved 8 March 2017.\n^ \"Why must 'self' be used explicitly in method definitions and calls?\". Design and History FAQ. Python Software Foundation. Archived from the original on 24 October 2012. Retrieved 19 February 2012.\n^ Sweigart, Al (2020). Beyond the Basic Stuff with Python: Best Practices for Writing Clean Code. No Starch Press. p. 322. ISBN 978-1-59327-966-0. Archived from the original on 13 August 2021. Retrieved 7 July 2021.\n^ \"The Python Language Reference, section 3.3. New-style and classic classes, for release 2.7.1\". Archived from the original on 26 October 2012. Retrieved 12 January 2011.\n^ \"PEP 484 – Type Hints | peps.python.org\". peps.python.org. Archived from the original on 27 November 2023. Retrieved 29 November 2023.\n^ \"typing — Support for type hints\". Python documentation. Python Software Foundation. Archived from the original on 21 February 2020. Retrieved 22 December 2023.\n^ \"mypy – Optional Static Typing for Python\". Archived from the original on 6 June 2020. Retrieved 28 January 2017.\n^ \"Introduction\". mypyc.readthedocs.io. Archived from the original on 22 December 2023. Retrieved 22 December 2023.\n^ \"15. Floating Point Arithmetic: Issues and Limitations – Python 3.8.3 documentation\". docs.python.org. Archived from the original on 6 June 2020. Retrieved 6 June 2020. Almost all machines today (November 2000) use IEEE-754 floating point arithmetic, and almost all platforms map Python floats to IEEE-754 \"double precision\".\n^ Zadka, Moshe; van Rossum, Guido (11 March 2001). \"PEP 237 – Unifying Long Integers and Integers\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 28 May 2020. Retrieved 24 September 2011.\n^ \"Built-in Types\". Archived from the original on 14 June 2020. Retrieved 3 October 2019.\n^ \"PEP 465 – A dedicated infix operator for matrix multiplication\". python.org. Archived from the original on 29 May 2020. Retrieved 3 July 2018.\n^ a b Zadka, Moshe; van Rossum, Guido (11 March 2001). \"PEP 238 – Changing the Division Operator\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 28 May 2020. Retrieved 23 October 2013.\n^ \"Why Python's Integer Division Floors\". 24 August 2010. Archived from the original on 5 June 2020. Retrieved 25 August 2010.\n^ \"round\", The Python standard library, release 3.2, §2: Built-in functions, archived from the original on 25 October 2012, retrieved 14 August 2011\n^ \"round\", The Python standard library, release 2.7, §2: Built-in functions, archived from the original on 27 October 2012, retrieved 14 August 2011\n^ Beazley, David M. (2009). Python Essential Reference (4th ed.). Addison-Wesley Professional. p. 66. ISBN 9780672329784.\n^ Kernighan, Brian W.; Ritchie, Dennis M. (1988). The C Programming Language (2nd ed.). p. 206.\n^ a b Batista, Facundo (17 October 2003). \"PEP 327 – Decimal Data Type\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 4 June 2020. Retrieved 24 November 2008.\n^ \"What's New in Python 2.6\". Python v2.6.9 documentation. 29 October 2013. Archived from the original on 23 December 2019. Retrieved 26 September 2015.\n^ \"10 Reasons Python Rocks for Research (And a Few Reasons it Doesn't) – Hoyt Koepke\". University of Washington Department of Statistics. Archived from the original on 31 May 2020. Retrieved 3 February 2019.\n^ Shell, Scott (17 June 2014). \"An introduction to Python for scientific computing\" (PDF). Archived (PDF) from the original on 4 February 2019. Retrieved 3 February 2019.\n^ Piotrowski, Przemyslaw (July 2006). \"Build a Rapid Web Development Environment for Python Server Pages and Oracle\". Oracle Technology Network. Oracle. Archived from the original on 2 April 2019. Retrieved 12 March 2012.\n^ Eby, Phillip J. (7 December 2003). \"PEP 333 – Python Web Server Gateway Interface v1.0\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 14 June 2020. Retrieved 19 February 2012.\n^ \"PyPI\". PyPI. 17 March 2024. Archived from the original on 17 March 2024.\n^ Enthought, Canopy. \"Canopy\". www.enthought.com. Archived from the original on 15 July 2017. Retrieved 20 August 2016.\n^ \"PEP 7 – Style Guide for C Code | peps.python.org\". peps.python.org. Archived from the original on 24 April 2022. Retrieved 28 April 2022.\n^ \"4. Building C and C++ Extensions – Python 3.9.2 documentation\". docs.python.org. Archived from the original on 3 March 2021. Retrieved 1 March 2021.\n^ van Rossum, Guido (5 June 2001). \"PEP 7 – Style Guide for C Code\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 1 June 2020. Retrieved 24 November 2008.\n^ \"CPython byte code\". Docs.python.org. Archived from the original on 5 June 2020. Retrieved 16 February 2016.\n^ \"Python 2.5 internals\" (PDF). Archived (PDF) from the original on 6 August 2012. Retrieved 19 April 2011.\n^ \"Changelog – Python 3.9.0 documentation\". docs.python.org. Archived from the original on 7 February 2021. Retrieved 8 February 2021.\n^ \"Download Python\". Python.org. Archived from the original on 8 December 2020. Retrieved 13 December 2020.\n^ \"history [vmspython]\". www.vmspython.org. Archived from the original on 2 December 2020. Retrieved 4 December 2020.\n^ \"An Interview with Guido van Rossum\". Oreilly.com. Archived from the original on 16 July 2014. Retrieved 24 November 2008.\n^ \"Download Python for Other Platforms\". Python.org. Archived from the original on 27 November 2020. Retrieved 4 December 2020.\n^ \"PyPy compatibility\". Pypy.org. Archived from the original on 6 June 2020. Retrieved 3 December 2012.\n^ Team, The PyPy (28 December 2019). \"Download and Install\". PyPy. Archived from the original on 8 January 2022. Retrieved 8 January 2022.\n^ \"speed comparison between CPython and Pypy\". Speed.pypy.org. Archived from the original on 10 May 2021. Retrieved 3 December 2012.\n^ \"Codon: Differences with Python\". Archived from the original on 25 May 2023. Retrieved 28 August 2023.\n^ Lawson, Loraine (14 March 2023). \"MIT-Created Compiler Speeds up Python Code\". The New Stack. Archived from the original on 6 April 2023. Retrieved 28 August 2023.\n^ \"Application-level Stackless features – PyPy 2.0.2 documentation\". Doc.pypy.org. Archived from the original on 4 June 2020. Retrieved 17 July 2013.\n^ \"Python-for-EV3\". LEGO Education. Archived from the original on 7 June 2020. Retrieved 17 April 2019.\n^ Yegulalp, Serdar (29 October 2020). \"Pyston returns from the dead to speed Python\". InfoWorld. Archived from the original on 27 January 2021. Retrieved 26 January 2021.\n^ \"cinder: Instagram's performance-oriented fork of CPython\". GitHub. Archived from the original on 4 May 2021. Retrieved 4 May 2021.\n^ Aroca, Rafael (7 August 2021). \"Snek Lang: feels like Python on Arduinos\". Yet Another Technology Blog. Archived from the original on 5 January 2024. Retrieved 4 January 2024.\n^ Aufranc (CNXSoft), Jean-Luc (16 January 2020). \"Snekboard Controls LEGO Power Functions with CircuitPython or Snek Programming Languages (Crowdfunding) – CNX Software\". CNX Software – Embedded Systems News. Archived from the original on 5 January 2024. Retrieved 4 January 2024.\n^ Kennedy (@mkennedy), Michael. \"Ready to find out if you're git famous?\". pythonbytes.fm. Archived from the original on 5 January 2024. Retrieved 4 January 2024.\n^ Packard, Keith (20 December 2022). \"The Snek Programming Language: A Python-inspired Embedded Computing Language\" (PDF). Archived (PDF) from the original on 4 January 2024. Retrieved 4 January 2024.\n^ \"Plans for optimizing Python\". Google Project Hosting. 15 December 2009. Archived from the original on 11 April 2016. Retrieved 24 September 2011.\n^ \"Python on the Nokia N900\". Stochastic Geometry. 29 April 2010. Archived from the original on 20 June 2019. Retrieved 9 July 2015.\n^ \"Brython\". brython.info. Archived from the original on 3 August 2018. Retrieved 21 January 2021.\n^ \"Transcrypt – Python in the browser\". transcrypt.org. Archived from the original on 19 August 2018. Retrieved 22 December 2020.\n^ \"Transcrypt: Anatomy of a Python to JavaScript Compiler\". InfoQ. Archived from the original on 5 December 2020. Retrieved 20 January 2021.\n^ \"Nuitka Home | Nuitka Home\". nuitka.net. Archived from the original on 30 May 2020. Retrieved 18 August 2017.\n^ Guelton, Serge; Brunet, Pierrick; Amini, Mehdi; Merlini, Adrien; Corbillon, Xavier; Raynaud, Alan (16 March 2015). \"Pythran: enabling static optimization of scientific Python programs\". Computational Science & Discovery. 8 (1). IOP Publishing: 014001. Bibcode:2015CS&D....8a4001G. doi:10.1088/1749-4680/8/1/014001. ISSN 1749-4699.\n^ \"The Python → 11l → C++ transpiler\". Archived from the original on 24 September 2022. Retrieved 17 July 2022.\n^ \"google/grumpy\". 10 April 2020. Archived from the original on 15 April 2020. Retrieved 25 March 2020 – via GitHub.\n^ \"Projects\". opensource.google. Archived from the original on 24 April 2020. Retrieved 25 March 2020.\n^ Francisco, Thomas Claburn in San. \"Google's Grumpy code makes Python Go\". www.theregister.com. Archived from the original on 7 March 2021. Retrieved 20 January 2021.\n^ \"GitHub – IronLanguages/ironpython3: Implementation of Python 3.x for .NET Framework that is built on top of the Dynamic Language Runtime\". GitHub. Archived from the original on 28 September 2021.\n^ \"IronPython.net /\". ironpython.net. Archived from the original on 17 April 2021.\n^ \"Jython FAQ\". www.jython.org. Archived from the original on 22 April 2021. Retrieved 22 April 2021.\n^ Murri, Riccardo (2013). Performance of Python runtimes on a non-numeric scientific code. European Conference on Python in Science (EuroSciPy). arXiv:1404.6388. Bibcode:2014arXiv1404.6388M.\n^ \"The Computer Language Benchmarks Game\". Archived from the original on 14 June 2020. Retrieved 30 April 2020.\n^ a b Warsaw, Barry; Hylton, Jeremy; Goodger, David (13 June 2000). \"PEP 1 – PEP Purpose and Guidelines\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 6 June 2020. Retrieved 19 April 2011.\n^ \"PEP 8 – Style Guide for Python Code\". Python.org. Archived from the original on 17 April 2019. Retrieved 26 March 2019.\n^ Cannon, Brett. \"Guido, Some Guys, and a Mailing List: How Python is Developed\". python.org. Python Software Foundation. Archived from the original on 1 June 2009. Retrieved 27 June 2009.\n^ \"Moving Python's bugs to GitHub [LWN.net]\". Archived from the original on 2 October 2022. Retrieved 2 October 2022.\n^ \"Python Developer's Guide – Python Developer's Guide\". devguide.python.org. Archived from the original on 9 November 2020. Retrieved 17 December 2019.\n^ Hughes, Owen (24 May 2021). \"Programming languages: Why Python 4.0 might never arrive, according to its creator\". TechRepublic. Archived from the original on 14 July 2022. Retrieved 16 May 2022.\n^ \"PEP 602 – Annual Release Cycle for Python\". Python.org. Archived from the original on 14 June 2020. Retrieved 6 November 2019.\n^ \"Changing the Python release cadence [LWN.net]\". lwn.net. Archived from the original on 6 November 2019. Retrieved 6 November 2019.\n^ Norwitz, Neal (8 April 2002). \"[Python-Dev] Release Schedules (was Stability & change)\". Archived from the original on 15 December 2018. Retrieved 27 June 2009.\n^ a b Aahz; Baxter, Anthony (15 March 2001). \"PEP 6 – Bug Fix Releases\". Python Enhancement Proposals. Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 27 June 2009.\n^ \"Python Buildbot\". Python Developer's Guide. Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 24 September 2011.\n^ \"1. Extending Python with C or C++ – Python 3.9.1 documentation\". docs.python.org. Archived from the original on 23 June 2020. Retrieved 14 February 2021.\n^ \"PEP 623 – Remove wstr from Unicode\". Python.org. Archived from the original on 5 March 2021. Retrieved 14 February 2021.\n^ \"PEP 634 – Structural Pattern Matching: Specification\". Python.org. Archived from the original on 6 May 2021. Retrieved 14 February 2021.\n^ \"Documentation Tools\". Python.org. Archived from the original on 11 November 2020. Retrieved 22 March 2021.\n^ a b \"Whetting Your Appetite\". The Python Tutorial. Python Software Foundation. Archived from the original on 26 October 2012. Retrieved 20 February 2012.\n^ \"In Python, should I use else after a return in an if block?\". Stack Overflow. Stack Exchange. 17 February 2011. Archived from the original on 20 June 2019. Retrieved 6 May 2011.\n^ Lutz, Mark (2009). Learning Python: Powerful Object-Oriented Programming. O'Reilly Media, Inc. p. 17. ISBN 9781449379322. Archived from the original on 17 July 2017. Retrieved 9 May 2017.\n^ Fehily, Chris (2002). Python. Peachpit Press. p. xv. ISBN 9780201748840. Archived from the original on 17 July 2017. Retrieved 9 May 2017.\n^ Lubanovic, Bill (2014). Introducing Python. Sebastopol, CA : O'Reilly Media. p. 305. ISBN 978-1-4493-5936-2. Retrieved 31 July 2023.\n^ Blake, Troy (18 January 2021). \"TIOBE Index for January 2021\". Technology News and Information by SeniorDBA. Archived from the original on 21 March 2021. Retrieved 26 February 2021.\n^ \"Quotes about Python\". Python Software Foundation. Archived from the original on 3 June 2020. Retrieved 8 January 2012.\n^ \"Organizations Using Python\". Python Software Foundation. Archived from the original on 21 August 2018. Retrieved 15 January 2009.\n^ \"Python : the holy grail of programming\". CERN Bulletin (31/2006). CERN Publications. 31 July 2006. Archived from the original on 15 January 2013. Retrieved 11 February 2012.\n^ Shafer, Daniel G. (17 January 2003). \"Python Streamlines Space Shuttle Mission Design\". Python Software Foundation. Archived from the original on 5 June 2020. Retrieved 24 November 2008.\n^ \"Tornado: Facebook's Real-Time Web Framework for Python – Facebook for Developers\". Facebook for Developers. Archived from the original on 19 February 2019. Retrieved 19 June 2018.\n^ \"What Powers Instagram: Hundreds of Instances, Dozens of Technologies\". Instagram Engineering. 11 December 2016. Archived from the original on 15 June 2020. Retrieved 27 May 2019.\n^ \"How we use Python at Spotify\". Spotify Labs. 20 March 2013. Archived from the original on 10 June 2020. Retrieved 25 July 2018.\n^ Fortenberry, Tim (17 January 2003). \"Industrial Light & Magic Runs on Python\". Python Software Foundation. Archived from the original on 6 June 2020. Retrieved 11 February 2012.\n^ Taft, Darryl K. (5 March 2007). \"Python Slithers into Systems\". eWeek.com. Ziff Davis Holdings. Archived from the original on 13 August 2021. Retrieved 24 September 2011.\n^ GitHub – reddit-archive/reddit: historical code from reddit.com., The Reddit Archives, archived from the original on 1 June 2020, retrieved 20 March 2019\n^ \"Real time communication at scale with Elixir at Discord\". 8 October 2020.\n^ \"What Programming Language is Baidu Built In?\". 5 July 2018.\n^ \"Usage statistics and market share of Python for websites\". 2012. Archived from the original on 13 August 2021. Retrieved 18 December 2012.\n^ Oliphant, Travis (2007). \"Python for Scientific Computing\". Computing in Science and Engineering. 9 (3): 10–20. Bibcode:2007CSE.....9c..10O. CiteSeerX 10.1.1.474.6460. doi:10.1109/MCSE.2007.58. ISSN 1521-9615. S2CID 206457124. Archived from the original on 15 June 2020. Retrieved 10 April 2015.\n^ Millman, K. Jarrod; Aivazis, Michael (2011). \"Python for Scientists and Engineers\". Computing in Science and Engineering. 13 (2): 9–12. Bibcode:2011CSE....13b...9M. doi:10.1109/MCSE.2011.36. Archived from the original on 19 February 2019. Retrieved 7 July 2014.\n^ Science education with SageMath, Innovative Computing in Science Education, archived from the original on 15 June 2020, retrieved 22 April 2019\n^ \"OpenCV: OpenCV-Python Tutorials\". docs.opencv.org. Archived from the original on 23 September 2020. Retrieved 14 September 2020.\n^ Dean, Jeff; Monga, Rajat; et al. (9 November 2015). \"TensorFlow: Large-scale machine learning on heterogeneous systems\" (PDF). TensorFlow.org. Google Research. Archived (PDF) from the original on 20 November 2015. Retrieved 10 November 2015.\n^ Piatetsky, Gregory. \"Python eats away at R: Top Software for Analytics, Data Science, Machine Learning in 2018: Trends and Analysis\". KDnuggets. Archived from the original on 15 November 2019. Retrieved 30 May 2018.\n^ \"Who is using scikit-learn? – scikit-learn 0.20.1 documentation\". scikit-learn.org. Archived from the original on 6 May 2020. Retrieved 30 November 2018.\n^ Jouppi, Norm. \"Google supercharges machine learning tasks with TPU custom chip\". Google Cloud Platform Blog. Archived from the original on 18 May 2016. Retrieved 19 May 2016.\n^ De Raedt, Luc; Kimmig, Angelika (2015). \"Probabilistic (logic) programming concepts\". Machine Learning. 100 (1): 5–47. doi:10.1007/s10994-015-5494-z. S2CID 3166992.\n^ \"Natural Language Toolkit – NLTK 3.5b1 documentation\". www.nltk.org. Archived from the original on 13 June 2020. Retrieved 10 April 2020.\n^ Andersen, C. and Swift, T., 2023. The Janus System: a bridge to new prolog applications. In Prolog: The Next 50 Years (pp. 93–104). Cham: Springer Nature Switzerland.\n^ \"SWI-Prolog Python interface\". Archived from the original on 15 March 2024. Retrieved 15 March 2024.\n^ Tarau, P., 2023. Reflections on automation, learnability and expressiveness in logic-based programming languages. In Prolog: The Next 50 Years (pp. 359–371). Cham: Springer Nature Switzerland.\n^ \"Tkinter — Python interface to TCL/Tk\". Archived from the original on 18 October 2012. Retrieved 9 June 2023.\n^ \"Python Tkinter Tutorial\". 3 June 2020. Archived from the original on 9 June 2023. Retrieved 9 June 2023.\n^ \"Installers for GIMP for Windows – Frequently Asked Questions\". 26 July 2013. Archived from the original on 17 July 2013. Retrieved 26 July 2013.\n^ \"jasc psp9components\". Archived from the original on 19 March 2008.\n^ \"About getting started with writing geoprocessing scripts\". ArcGIS Desktop Help 9.2. Environmental Systems Research Institute. 17 November 2006. Archived from the original on 5 June 2020. Retrieved 11 February 2012.\n^ CCP porkbelly (24 August 2010). \"Stackless Python 2.7\". EVE Community Dev Blogs. CCP Games. Archived from the original on 11 January 2014. Retrieved 11 January 2014. As you may know, EVE has at its core the programming language known as Stackless Python.\n^ Caudill, Barry (20 September 2005). \"Modding Sid Meier's Civilization IV\". Sid Meier's Civilization IV Developer Blog. Firaxis Games. Archived from the original on 2 December 2010. we created three levels of tools ... The next level offers Python and XML support, letting modders with more experience manipulate the game world and everything in it.\n^ \"Python Language Guide (v1.0)\". Google Documents List Data API v1.0. Archived from the original on 15 July 2010.\n^ \"Python Setup and Usage\". Python Software Foundation. Archived from the original on 17 June 2020. Retrieved 10 January 2020.\n^ \"Immunity: Knowing You're Secure\". Archived from the original on 16 February 2009.\n^ \"Core Security\". Core Security. Archived from the original on 9 June 2020. Retrieved 10 April 2020.\n^ \"What is Sugar?\". Sugar Labs. Archived from the original on 9 January 2009. Retrieved 11 February 2012.\n^ \"4.0 New Features and Fixes\". LibreOffice.org. The Document Foundation. 2013. Archived from the original on 9 February 2014. Retrieved 25 February 2013.\n^ \"Gotchas for Python Users\". boo.codehaus.org. Codehaus Foundation. Archived from the original on 11 December 2008. Retrieved 24 November 2008.\n^ Esterbrook, Charles. \"Acknowledgements\". cobra-language.com. Cobra Language. Archived from the original on 8 February 2008. Retrieved 7 April 2010.\n^ \"Proposals: iterators and generators [ES4 Wiki]\". wiki.ecmascript.org. Archived from the original on 20 October 2007. Retrieved 24 November 2008.\n^ \"Frequently asked questions\". Godot Engine documentation. Archived from the original on 28 April 2021. Retrieved 10 May 2021.\n^ Kincaid, Jason (10 November 2009). \"Google's Go: A New Programming Language That's Python Meets C++\". TechCrunch. Archived from the original on 18 January 2010. Retrieved 29 January 2010.\n^ Strachan, James (29 August 2003). \"Groovy – the birth of a new dynamic language for the Java platform\". Archived from the original on 5 April 2007. Retrieved 11 June 2007.\n^ \"Modular Docs – Why Mojo\". docs.modular.com. Archived from the original on 5 May 2023. Retrieved 5 May 2023. Mojo as a member of the Python family [..] Embracing Python massively simplifies our design efforts, because most of the syntax is already specified. [..] we decided that the right long-term goal for Mojo is to provide a superset of Python (i.e. be compatible with existing programs) and to embrace the CPython immediately for long-tail ecosystem enablement. To a Python programmer, we expect and hope that Mojo will be immediately familiar, while also providing new tools for developing systems-level code that enable you to do things that Python falls back to C and C++ for.\n^ Spencer, Michael (4 May 2023). \"What is Mojo Programming Language?\". datasciencelearningcenter.substack.com. Archived from the original on 5 May 2023. Retrieved 5 May 2023.\n^ Yegulalp, Serdar (16 January 2017). \"Nim language draws from best of Python, Rust, Go, and Lisp\". InfoWorld. Archived from the original on 13 October 2018. Retrieved 7 June 2020. Nim's syntax is strongly reminiscent of Python's, as it uses indented code blocks and some of the same syntax (such as the way if/elif/then/else blocks are constructed).\n^ \"An Interview with the Creator of Ruby\". Linuxdevcenter.com. Archived from the original on 28 April 2018. Retrieved 3 December 2012.\n^ Lattner, Chris (3 June 2014). \"Chris Lattner's Homepage\". Chris Lattner. Archived from the original on 22 December 2015. Retrieved 3 June 2014. I started work on the Swift Programming Language in July of 2010. I implemented much of the basic language structure, with only a few people knowing of its existence. A few other (amazing) people started contributing in earnest late in 2011, and it became a major focus for the Apple Developer Tools group in July 2013 [...] drawing ideas from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and far too many others to list.\n^ Jalan, Nishant Aanjaney (10 November 2022). \"Programming in Kotlin\". CodeX. Retrieved 29 April 2024.\n^ Kupries, Andreas; Fellows, Donal K. (14 September 2000). \"TIP #3: TIP Format\". tcl.tk. Tcl Developer Xchange. Archived from the original on 13 July 2017. Retrieved 24 November 2008.\n^ Gustafsson, Per; Niskanen, Raimo (29 January 2007). \"EEP 1: EEP Purpose and Guidelines\". erlang.org. Archived from the original on 15 June 2020. Retrieved 19 April 2011.\n^ \"Swift Evolution Process\". Swift Programming Language Evolution repository on GitHub. 18 February 2020. Archived from the original on 27 April 2020. Retrieved 27 April 2020.\nSources[edit]\n\"Python for Artificial Intelligence\". Python Wiki. 19 July 2012. Archived from the original on 1 November 2012. Retrieved 3 December 2012.\nPaine, Jocelyn, ed. (August 2005). \"AI in Python\". AI Expert Newsletter. Amzi!. Archived from the original on 26 March 2012. Retrieved 11 February 2012.\n\"PyAIML 0.8.5 : Python Package Index\". Pypi.python.org. Retrieved 17 July 2013.\nRussell, Stuart J. & Norvig, Peter (2009). Artificial Intelligence: A Modern Approach (3rd ed.). Upper Saddle River, NJ: Prentice Hall. ISBN 978-0-13-604259-4.\nFurther reading[edit]\nDowney, Allen (July 2024). Think Python: How to Think Like a Computer Scientist (3rd ed.). O'Reilly Media. ISBN 978-1098155438.\nLutz, Mark (2013). Learning Python (5th ed.). O'Reilly Media. ISBN 978-0-596-15806-4.\nSummerfield, Mark (2009). Programming in Python 3 (2nd ed.). Addison-Wesley Professional. ISBN 978-0-321-68056-3.\nRamalho, Luciano (May 2022). Fluent Python. O'Reilly Media. ISBN 978-1-4920-5632-4.\nExternal links[edit]\nPython\nat Wikipedia's sister projects\nMedia from Commons\nQuotations from Wikiquote\nTextbooks from Wikibooks\nResources from Wikiversity\nData from Wikidata\nOfficial website \nThe Python Tutorial\nvte\nPython\nImplementations \nCircuitPythonCLPythonCPythonCythonMicroPythonNumbaIronPythonJythonPsycoPyPyPython for S60Shed SkinStackless PythonUnladen Swallowmore...\nIDEs  \nericIDLENinja-IDEPyCharmPyDevSpydermore...\nTopics\nWSGIASGI\nDesigner  \nGuido van Rossum\nSoftware (list)Python Software FoundationPython Conference (PyCon)\nvte\nProgramming languages\nComparisonTimelineHistory\nAdaALGOL SimulaAPLAssemblyBASIC Visual Basic classic.NETCC++C#COBOLErlangForthFortranGoHaskellJavaJavaScriptJuliaKotlinLispLuaMATLABMLPascal Object PascalPerlPHPPrologPythonRRubyRustSQLScratchShellSmalltalkSwiftmore...\nLists: AlphabeticalCategoricalGenerationalNon-English-based Category\nvte\nPython web frameworks\nBottleCherryPyCubicWebDjangoFastAPIFlaskGrokNevowPylonsPyramidQuixoteTornadoTurboGearsTwistedWebweb2pyZope 2more...\nComparison\nvte\nDifferentiable computing\nGeneral \nDifferentiable programmingInformation geometryStatistical manifoldAutomatic differentiationNeuromorphic computingPattern recognitionRicci calculusComputational learning theoryInductive bias\nHardware  \nIPUTPUVPUMemristorSpiNNaker\nSoftware libraries\nTensorFlowPyTorchKerasscikit-learnTheanoJAXFlux.jlMindSpore\nPortals Computer programmingTechnology\nvte\nFree and open-source software\nGeneral \nAlternative terms for free softwareComparison of open-source and closed-source softwareComparison of source-code-hosting facilitiesFree softwareFree software project directoriesGratis versus libreLong-term supportOpen-source softwareOpen-source software developmentOutlineTimeline\nSoftware\npackages  \nAudioBioinformaticsCodecsConfiguration managementDrivers GraphicsWirelessHealthMathematicsOffice suitesOperating systemsRoutingTelevisionVideo gamesWeb applications E-commerceAndroid appsiOS appsCommercialFormerly proprietaryFormerly open-source\nCommunity \nFree software movementHistoryOpen-source-software movementEventsAdvocacy\nOrganisations \nFree Software Movement of IndiaFree Software Foundation\nLicenses  \nAFLApacheAPSLArtisticBeerwareBSDCreative CommonsCDDLEPLFree Software Foundation GNU GPLGNU AGPLGNU LGPLISCMITMPLPythonPython Software Foundation LicenseShared Source InitiativeSleepycatUnlicenseWTFPLzlib\nTypes and\nstandards \nComparison of licensesContributor License AgreementCopyleftDebian Free Software GuidelinesDefinition of Free Cultural WorksFree licenseThe Free Software DefinitionThe Open Source DefinitionOpen-source licensePermissive software licensePublic domain\nChallenges\nDigital rights managementLicense proliferationMozilla software rebrandingProprietary device driversProprietary firmwareProprietary softwareSCO/Linux controversiesSoftware patentsSoftware securityTivoizationTrusted Computing\nRelated\ntopics\nForkingGNU ManifestoMicrosoft Open Specification PromiseOpen-core modelOpen-source hardwareShared Source InitiativeSource-available softwareThe Cathedral and the BazaarRevolution OS\nPortal Category\nvte\nStatistical software\nvte\nNumerical-analysis software\nFree  \nAdvanced Simulation LibraryADMBChapelEuler Mathematical ToolboxFreeFem++FreeMatGeniusGmshGNU OctavegretlJuliaJupyter (Julia, Python, R; IPython)MFEMOpenFOAMPythonRSageMathSalomeScicosLabScilabX10Weka\nDiscontinued  \nFortress\nProprietary \nDADiSPFEATool MultiphysicsGAUSSLabVIEWMapleMathcadMathematicaMATLABSpeakeasyVisSim\nComparison\nAuthority control databases \nInternational \nFAST\nNational  \nGermanyUnited StatesFranceBnF dataCzech RepublicIsrael\nOther \nIdRef\nCategories: Python (programming language)Class-based programming languagesNotebook interfaceComputer science in the NetherlandsConcurrent programming languagesCross-platform free softwareCross-platform softwareDutch inventionsDynamically typed programming languagesEducational programming languagesHigh-level programming languagesInformation technology in the NetherlandsMulti-paradigm programming languagesObject-oriented programming languagesPattern matching programming languagesProgramming languagesProgramming languages created in 1991Scripting languagesText-oriented programming languages\nThis page was last edited on 3 February 2025, at 11:44 (UTC).\nText is available under the Creative Commons Attribution-ShareAlike 4.0 License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.\nPrivacy policy\nAbout Wikipedia\nDisclaimers\nContact Wikipedia\nCode of Conduct\nDevelopers\nStatistics\nCookie statement\nMobile view"
      },
      {
        "title": "What is Python? Its Uses and Applications - GeeksforGeeks",
        "url": "https://www.geeksforgeeks.org/what-is-python/",
        "content": "What is Python? Python Python Python Tutorial Python Python Tutorial Python Data Visualization Tutorial Python Tutorial What is Python? What is Python? What is Python? What is Python? Python ``` *Python Tutorial* *What is Python and why it is used?* What is Python Used For? Python python What is Python? What is Python? What is Python Used For? | 7 Practical Python Applications Python is an interpreted and object-oriented programming language commonly used for web development, data analysis, artificial intelligence, and more. What is Python Used For? Why Pandas is Used in Python Pandas is an open-source library for the Python programming language that has become synonymous with data manipulation and analysis. Python Python Tutorial Python",
        "score": 0.76951396,
        "raw_content": "What is Python? Its Uses and Applications - GeeksforGeeks\nSkip to content\n\nCourses\nDSA to Development\nMachine Learning & Data Science\nGenerative AI & ChatGPT\nBecome AWS Certified\nDSA Courses\nData Structure & Algorithm(C++/JAVA)\nData Structure & Algorithm(Python)\nData Structure & Algorithm(JavaScript)\n\n\nProgramming Languages\nCPP\nJava\nPython\nJavaScript\nC\n\n\nAll Courses\n\n\nTutorials\nPython\nPython Tutorial\nPython Programs\nPython Quiz\nPython Projects\nPython Interview Questions\nPython Data Structures\n\n\nJava\nJava Tutorial\nJava Collections\nJava 8 Tutorial\nJava Programs\nJava Quiz\nJava Projects\nJava Interview Questions\nAdvanced Java\n\n\nProgramming Languages\nJavaScript\nC++\nR Tutorial\nSQL\nPHP\nC#\nC\nScala\nPerl\nGo Language\nKotlin\n\n\nSystem Design\nSystem Design Tutorial\nSoftware Design Patterns\nSystem Design Roadmap\nTop 10 System Design Interview Questions and Answers\n\n\nInterview Corner\nCompany Preparation\nTop Topics\nPractice Company Questions\nInterview Experiences\nExperienced Interviews\nInternship Interviews\nCompetitive Programming\nMultiple Choice Quizzes\nAptitude for Placements\n\n\nComputer Science Subjects\nOperating System\nDBMS\nComputer Networks\nEngineering Mathematics\nComputer Organization and Architecture\nTheory of Computation\nCompiler Design\nDigital Logic\nSoftware Engineering\n\n\nDevOps\nGIT\nAWS\nDocker\nKubernetes\nMicrosoft Azure Tutorial\nGoogle Cloud Platform\n\n\nLinux\nLinux Tutorial\nLinux Commands A-Z\nLinux Commands Cheatsheet\nFile Permission Commands\nLinux System Administration\nLinux File System\nLinux Shell Scripting\nLinux Networking\nLinux Interview Questions\n\n\nSoftware Testing\nSoftware Testing Tutorial\nSoftware Engineering Tutorial\nTesting Interview Questions\nJira\n\n\nDatabases\nDBMS Tutorial\nSQL Tutorial\nPostgreSQL Tutorial\nMongoDB Tutorial\nSQL Interview Questions\nMySQL Interview Questions\nPL/SQL Interview Questions\n\n\nAndroid\nAndroid Tutorial\nAndroid Studio Tutorial\nKotlin For Android\nAndroid Projects\nAndroid Interview Questions\n6 Weeks of Android App Development\n\n\nExcel\nMS Excel Tutorial\nIntroduction to MS Excel\nData Analysis in Excel\nBasic Excel Formulas & Functions\nData Analysis in Advanced Excel\nWorkbooks\nStatistical Functions\nData Visualization in Excel\nPivot Tables in Excel\nExcel Spreadsheets in Python\nBasic Excel Shortcuts\n\n\nMathematics\nNumber System\nAlgebra\nLinear Algebra\nTrigonometry\nSet Theory\nStatistics\nProbability\nGeometry\nMensuration\nLogarithms\nCalculus\n\n\n\n\nDSA\nData Structures\nArrays\nMatrix\nStrings\nLinked List\nStack\nQueue\nTree\nHeap\nHashing\nGraph\nSet Data Structure\nMap Data Structure\nAdvanced Data Structure\nData Structures Tutorial\n\n\nAlgorithms\nAnalysis of Algorithms\nDesign and Analysis of Algorithms\nAsymptotic Analysis\nAsymptotic Notations\nWorst, Average and Best Cases\n\n\nSearching Algorithms\nLinear Search\nBinary Search\nSearching Algorithms Tutorial\n\n\nSorting Algorithms\nSelection Sort\nBubble Sort\nInsertion Sort\nMerge Sort\nQuick Sort\nHeap Sort\nCounting Sort\nRadix Sort\nBucket Sort\nSorting Algorithms Tutorial\n\n\nGreedy Algorithms\nDynamic Programming\nGraph Algorithms\nPattern Searching\nRecursion\nBacktracking\nDivide and Conquer\nMathematical Algorithms\nGeometric Algorithms\nBitwise Algorithms\nRandomized Algorithms\nBranch and Bound\nAlgorithms Tutorial\n\n\nDSA Tutorial\nPractice\nAll DSA Problems\nProblem of the Day\nCompany Wise Coding Practice\nAmazon\nMicrosoft\nFlipkart\nExplore All\n\n\nGfG SDE Sheet\nPractice Problems Difficulty Wise\nSchool\nBasic\nEasy\nMedium\nHard\n\n\nLanguage Wise Coding Practice\nCPP\nJava\nPython\n\n\nCurated DSA Lists\nBeginner's DSA Sheet\nTop 50 Array Problems\nTop 50 String Problems\nTop 50 DP Problems\nTop 50 Graph Problems\nTop 50 Tree Problems\n\n\n\n\nCompetitive Programming\nCompany Wise SDE Sheets\nFacebook SDE Sheet\nAmazon SDE Sheet\nApple SDE Sheet\nNetflix SDE Sheet\nGoogle SDE Sheet\n\n\nDSA Cheat Sheets\nSDE Sheet\nDSA Sheet for Beginners\nFAANG Coding Sheet\nProduct-Based Coding Sheet\nCompany-Wise Preparation Sheet\n\n\nTop Interview Questions\nPuzzles\nAll Puzzles\nTop 100 Puzzles Asked In Interviews\nTop 20 Puzzles Commonly Asked During SDE Interviews\n\n\n\n\nData Science\nPython Tutorial\nR Tutorial\nMachine Learning\nData Science using Python\nData Science using R\nData Science Packages\nPandas Tutorial\nNumPy Tutorial\n\n\nData Visualization\nPython Data Visualization Tutorial\nData Visualization with R\n\n\nData Analysis\nData Analysis with Python\nData Analysis with R\n\n\nDeep Learning\nNLP Tutorial\n\n\n\nWeb Tech\n\nHTML Tutorial\nCSS Tutorial\nJavaScript Tutorial\nPHP Tutorial\nReactJS Tutorial\nNodeJS Tutorial\nBootstrap Tutorial\nTypescript\nWeb Development Using Python\nDjango\nDjango Tutorial\nDjango Projects\nDjango Interview Questions\n\n\nFlask\nFlask Tutorial\nFlask Projects\nFlask Interview Questions\n\n\nPostman\nGithub\n\n\nCheat Sheets\nHTML Cheat Sheet\nCSS Cheat Sheet\nJavaScript Cheat Sheet\nReact Cheat Sheet\nAngular Cheat Sheet\njQuery Cheat Sheet\nBootstrap Cheat Sheet\n\n\nLearn Complete Web Development\n\n\n\n\nPython Tutorial\n\nInterview Questions\nPython Quiz\nPython Projects\nPractice Python\nData Science With Python\nPython Web Dev\nDSA with Python\nPython OOPs\nLists\nStrings\nDictionary\n\n▲\nOpen In App\nWhat is Python? Its Uses and Applications\nLast Updated : 12 Sep, 2024\nSummarize\nComments\nImprove\nSuggest changes\nLike Article\nLike\nShare\nReport\n Follow\nPython is a programming language that is interpreted, object-oriented, and considered to be high-level too. What is Python? Python is one of the easiest yet most useful programming languages which is widely used in the software industry. People use Python for Competitive Programming, Web Development, and creating software. Due to its easiest syntax, it is recommended for beginners who are new to the software engineering field. Its demand is growing at a very rapid pace due to its vast use cases in Modern Technological fields like Data Science, Machine learning, and Automation Tasks. For many years now, it has been ranked among the top Programming languages.\n\nTable of Content\n\nWhat is Python?\nHistory of Python\nPython Syntax\nFeatures of Python\nAdvantages and Disadvantages of Python\nUses and Applications of Python\n\nToday Python is used in all kinds of development from game development, basic programming, and scripting to large and complex software development. It has a large community support and is rich in the library, having all kinds of frameworks for backend, frontend and you name it python has it all. So, as a technical enthusiast, you will definitely come across Python in this technological journey of yours, so you should know basic fundamentals of Python to get a better understanding of it and for that, you can learn about the *history of Python, its features, advantages and disadvantages, and applications* in this article.\nWhat is Python?\nPython is a set of instructions that we give in the form of a Program to our computer to perform any specific task. It is a Programming language having properties like it is interpreted, object-oriented and it is high-level too. Due to its beginner-friendly syntax, it became a clear choice for beginners to start their programming journey. The major focus behind creating it is *making it easier for developers to read and understand, also reducing the lines of code.*\nHistory of Python\nPython was *created in 1980s by Guido van Rossum. During his research at the National Research Institute for Mathematics and Computer Science in the Netherlands,* he created Python – a super easy programming language in terms of reading and usage. The first ever version was released in the year 1991 which had only a few built-in data types and basic functionality.\nLater, when it gained popularity among scientists for numerical computations and data analysis, in 1994, Python 1.0 was released with extra features like map, lambda, and filter functions. After that adding new functionalities and releasing newer versions of Python came into fashion.\n\nPython 1.5 released in 1997\nPython 2.0 released in 2000\nPython 3.0 in 2008 brought newer functionalities\n\nThe latest version of Python, Python 3.11 was released in 2022.\nNewer functionalities being added to Python makes it more beneficial for developers and improved its performance. In recent years, Python has gained a lot of popularity and is a highly demanding programming language. It has spread its demand in various fields which includes *machine learning, artificial intelligence, data analysis, web development,* and many more giving you a high-paying job. To get more in depth knowledge on Python, explore Python Free course a self paced guide to learn Python easily.\nPython Syntax\nSyntax in a programming language is a standard way of expressing values or statements which every programming language follows.\n\n*To print a statement-* print(“Hello World”)\nOutput: Hello World\n\n*A basic Python program to print a statement:*\nPython ```\ncode\nprint(\"Hello World\")\n```\n*Must Read:* *Python – Output using print() Function*\n\nIf you’re unsure of which platform to choose for practicing Python, *here are some of the* *Top 10 Python IDEs in 2023* which have the best IDEs you can use as a beginner.\n\nFeatures of Python\nPython has plenty of features that make it the most demanding and popular. Let’s read about a few of the best features that Python has:\n\nEasy to read and understand\nInterpreted language\nObject-oriented programming language\nFree and open-source\nVersatile and Extensible\nMulti-platform\nHundreds of libraries and frameworks\nFlexible, supports GUI\nDynamically typed\nHuge and active community\n\nThese also state the reasons why you should choose Python to learn as a beginner, or also to use it for development purposes as a developer, and a lot more.\nAdvantages and Disadvantages of Python\nEvery programming language comes with benefits and limitations as well. These benefits and limitations can be treated as advantages and disadvantages. Python also has a few disadvantages over many advantages. Let’s discuss each here:\nAdvantages of Python:\n\nEasy to learn, read, and understand\nVersatile and open-source\nImproves productivity\nSupports libraries\nHuge library\nStrong community\nInterpreted language\n\nDisadvantages of Python:\n\nRestrictions in design\nMemory inefficient\nWeak mobile computing\nRuntime errors\nSlow execution speed\n\nUses and Applications of Python\nPython being so popular and so technologically advanced has multiple use cases and has real-life applications. Some of the most common Python applications which are very common are discussed below.\n1. Web Development\nDevelopers prefer Python for web Development, due to its easy and feature-rich framework. They can create Dynamic websites with the best user experience using Python frameworks. Some of the frameworks are -Django, for Backend development and Flask, for Frontend development. Most internet companies, today are using Python framework as their core technology, because this is not only easy to implement but is highly scalable and efficient. Web development is one of the top Applications of Python, which is widely used across the industry to create highly efficient websites.\n2. Data Science\nData scientists can *build powerful AI models* using Python snippets. Due to its easily understandable feature, it allows developers to write complex algorithms. Data Science is used to create models and neural networks which can learn like human brains but are much faster than a single brain. It is used to extract patterns from past data and help organizations take their decisions. Also, companies use this field to make their future investments.\n3. Web Scrapping and Automation\nYou can also automate your tasks using Python with libraries like BeautifulSoup, pandas, matplotlib, etc. for *scraping and web automation.* Businesses use AI bots as customer support to cater to the needs of the customers, it not only saves their money but also proved to be providing a better customer experience. Web scrapping helps the business in analyzing their data and other competitors’ data to increase their share in the market. It will help the organizations, make their data organize and scale business by finding patterns from the scrapped data.\n4. CAD\nYou can also use Python to work on *CAD (computer-aided designs) designs,* to create 2D and 3D models digitally. There is dedicated CAD software available in the market, but you can also develop CAD applications using Python also. You can develop a Python-based CAD application according to your customizability and complexity, depending on your project. Using Python for CAD development allows easy deployment and integration across cross-platforms.\n5. Artificial Intelligence and Machine Learning\nUsing libraries like Pandas, and TensorFlow, experts can work on *data analysis and machine learning applications* for statistical analysis, data manipulation, etc. Python is one of the most used Programming languages in this field. It is worth saying that Python is the language of AI and ML. Python has contributed a lot to this field with its huge collection of libraries and large community support. Also, the field of Artificial intelligence and Machine learning is exponentially evolving, hence the use of Python is also going to increase a lot.\n6. Game Development\nPython can also be used by developers to *build games using Pygame to develop 2D and 3D games. Some of the popular games built using Python are Pirates of the Caribbean, Battlefield 2, etc. Python has a library named _Pygame*_, which is used to build interesting games. Since the gaming industry is gaining a lot market in recent years the use of these kinds of development has increased a lot in recent past. Also, it is very easy to build games using this library, you can also try to build some basic games.\n*Refer:* *Top 10 Python Applications in Real World*\n\n*Want to know the salary of a Python developer?*\n– The average salary of a Python developer in India is 6 LPA\n\nConclusion\nPython has a lot of reasons which make it a more popular and highly demanding programming language. High Community support and a large number of libraries and frameworks in Python make it the best choice for developers and beginners to choose it single handily. Python has use cases in web Development, Game Development, Automation, and technologies like AI, ML, and Data Analytics. Python is releasing its never version and adding new functions for the betterment of developers. But it has some limitations as well as discussed in the article like it is slow in execution, so Competitive Programmer prefer it less. But overall it is growing rapidly and has a very bright future ahead for this Programming language.\nMust Read\n\n\n*Python Tutorial*\n*Top 7 Python Developer Tools*\n*Best Way To Start Learning Python – A Complete Roadmap*\n\n\nFAQs\n*What is Python and why it is used?*\n\nPython is a very popular programming language used in software development for different purposes like website development including frontend and backend both. It is also used for scripting, take automation, web scraping, and programmer also used it for competitive programming for problem solving.\n\n*What is Python for example?*\n\nPython is an open-source programming language, having features like object-oriented, interpreted and high-level too. It is a dynamically typed programming language, which is easy to use with redable and user-friendly syntax. It has huge libraries, frameworks and large community support.\n\n*What are the basics of Python?*\n\nPython has different and easy syntax than other programming language which is similar to english language. You can learn it syntax and basic fundamentals very easily which include\n1. Data Types\n2. loop\n3. if-else statements\n4. functions\n5. OOPs concepts\n\nComment\nMore info\nAdvertise with us\nNext Article\nWhat is Python Used For? | 7 Practical Python Applications\nI\nishasharma44\nFollow\n\nImprove\nArticle Tags :\n\nGBlog\nPython\n\nPractice Tags :\n\npython\n\nSimilar Reads\n\nWhat is Python? Its Uses and Applications Python is a programming language that is interpreted, object-oriented, and considered to be high-level too. What is Python? Python is one of the easiest yet most useful programming languages which is widely used in the software industry. People use Python for Competitive Programming, Web Development 8 min read\nWhat is Python Used For? | 7 Practical Python Applications Python is an interpreted and object-oriented programming language commonly used for web development, data analysis, artificial intelligence, and more. It features a clean, beginner-friendly, and readable syntax. Due to its ecosystem of libraries, frameworks, and large community support, it has becom 9 min read\nBuild An AI Application with Python in 10 Easy Steps In today's data-driven world, the demand for AI applications is skyrocketing. From recommendation systems to image recognition and natural language processing, AI-powered solutions are revolutionizing industries and transforming user experiences. Building an AI application with Python has never been 5 min read\nStore Functions in List and Call in Python In Python, a list of functions can be created by defining the tasks and then adding them to a list. Hereâ€™s a simple example to illustrate how to do this: [GFGTABS] Python def say_hello(): return \"Hello!\" #Store a function \"say_hello\" in a list greetings = [say_hello] #Call the fi 3 min read\nTop 10 Python Applications in Real World We are living in a digital world that is completely driven by chunks of code. Every industry depends on software for its proper functioning be it healthcare, military, banking, research, and the list goes on. We have a huge list of programming languages that facilitate the software development proce 6 min read\nWhat is Python Used For? Python is a highly versatile programming language that's used across many fields and industries due to its readability, simplicity, and the vast availability of libraries. Here are some areas where Python is commonly used: Web Development: Python offers frameworks like Django and Flask, which make i 2 min read\nWhy Pandas is Used in Python Pandas is an open-source library for the Python programming language that has become synonymous with data manipulation and analysis. Developed by Wes McKinney in 2008, Pandas offers powerful, flexible, and easy-to-use data structures that have revolutionized how data scientists and analysts handle d 5 min read\nCreating Your First Application in Python Python is one of the simplest programming language out there. In fact, it was developed for the sole purpose of simplifying the process of learning a programming language and exposed beginners to the concepts of Programming. In this article, we will be building a Python Application. Not to worry it 5 min read\nPython | Set 3 (Strings, Lists, Tuples, Iterations) In the previous article, we read about the basics of Python. Now, we continue with some more python concepts. Strings in Python: A string is a sequence of characters that can be a combination of letters, numbers, and special characters. It can be declared in python by using single quotes, double quo 3 min read\nWhy Python Cannot Be Used For Making An Os An operating system is a piece of software that manages all the resources of a system, these include both the hardware and software resources and provide an environment in which users can execute their programs efficiently and conveniently as the operating system helps by hiding the underlying compl 5 min read\n\nLike\n\nExplore More\n\nCorporate & Communications Address:\nA-143, 7th Floor, Sovereign Corporate Tower, Sector- 136, Noida, Uttar Pradesh (201305)\nRegistered Address:\nK 061, Tower K, Gulshan Vivante Apartment, Sector 137, Noida, Gautam Buddh Nagar, Uttar Pradesh, 201305\n\n \nAdvertise with us\n\nCompany\nAbout Us\nLegal\nPrivacy Policy\nIn Media\nContact Us\nAdvertise with us\nGFG Corporate Solution\nPlacement Training Program\n\nGeeksforGeeks Community\n\n\nLanguages\n\nPython\nJava\nC++\nPHP\nGoLang\nSQL\nR Language\nAndroid Tutorial\n\nTutorials Archive\n\n\nDSA\n\nData Structures\nAlgorithms\nDSA for Beginners\nBasic DSA Problems\nDSA Roadmap\nTop 100 DSA Interview Problems\nDSA Roadmap by Sandeep Jain\n\nAll Cheat Sheets\n\n\nData Science & ML\n\nData Science With Python\nData Science For Beginner\nMachine Learning\nML Maths\nData Visualisation\nPandas\nNumPy\nNLP\n\nDeep Learning\n\n\nWeb Technologies\n\nHTML\nCSS\nJavaScript\nTypeScript\nReactJS\nNextJS\nBootstrap\n\nWeb Design\n\n\nPython Tutorial\n\nPython Programming Examples\nPython Projects\nPython Tkinter\nWeb Scraping\nOpenCV Tutorial\nPython Interview Question\n\nDjango\n\n\nComputer Science\n\nOperating Systems\nComputer Network\nDatabase Management System\nSoftware Engineering\nDigital Logic Design\nEngineering Maths\nSoftware Development\n\nSoftware Testing\n\n\nDevOps\n\nGit\nLinux\nAWS\nDocker\nKubernetes\nAzure\nGCP\n\nDevOps Roadmap\n\n\nSystem Design\n\nHigh Level Design\nLow Level Design\nUML Diagrams\nInterview Guide\nDesign Patterns\nOOAD\nSystem Design Bootcamp\n\nInterview Questions\n\n\nInteview Preparation\n\nCompetitive Programming\nTop DS or Algo for CP\nCompany-Wise Recruitment Process\nCompany-Wise Preparation\nAptitude Preparation\n\nPuzzles\n\n\nSchool Subjects\n\nMathematics\nPhysics\nChemistry\nBiology\nSocial Science\nEnglish Grammar\nCommerce\n\nWorld GK\n\n\nGeeksforGeeks Videos\n\nDSA\nPython\nJava\nC++\nWeb Development\nData Science\nCS Subjects\n\n@GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved\nWe use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It !\n\nImprovement\nSuggest changes\nSuggest Changes\nHelp us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.\n\nCreate Improvement\nEnhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.\n\nSuggest Changes\nmin 4 words, max CharLimit:2000 \n\nWhat kind of Experience do you want to share?\nInterview ExperiencesAdmission ExperiencesCareer JourneysWork ExperiencesCampus ExperiencesCompetitive Exam Experiences"
      }
    ],
    "response_time": 8.8
  }